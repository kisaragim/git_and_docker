MIME-Version: 1.0
Content-Type: multipart/mixed; boundary=o1XhT5JxchuqaoQqeoLBn7VCA8QePc5wffHmRXp
StorageVersion: v1

--o1XhT5JxchuqaoQqeoLBn7VCA8QePc5wffHmRXp

<?xml version='1.0' encoding='UTF-8'?><ResultsList path="/BugDetective/integerOverflow.c"><VersionInfos><StorageInfo ownerId="com.parasoft.xtest.checkers.api.execution" resultId="IExecutionViolation" ver="2"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.execution" resultId="InsureViolation" ver="3"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.scope" resultId="IScopeProjectInfo" ver="3"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricEstimationInfo" ver="2"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.generation" resultId="IGenerationInfo" ver="2"/><StorageInfo ownerId="com.parasoft.xtest.checkers.api.generation" resultId="IGenerationProjectInfo" ver="2"/></VersionInfos></ResultsList>
--o1XhT5JxchuqaoQqeoLBn7VCA8QePc5wffHmRXp

<?xml version='1.0' encoding='UTF-8'?><ResultInfo resultId="IFlowAnalysisViolation" ownerId="com.parasoft.xtest.checkers.api.standards" violKeys="87_/BugDetective/integerOverflow.c;86_/BugDetective/integerOverflow.c;85_/BugDetective/integerOverflow.c"><FlowViol msg="Data obtained from a socket (&quot;total_len&quot;) is used in a loop condition" ln="38" ruleSAFMsg="Tainted data use in a loop condition" auth="root" sev="1" rule="BD-SECURITY-TDLOOP" ruleSCSCMsg="Tainting point" tool="c++test" id="-2054941873" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="38" locStartPos="0" locEndLn="39" locEndPos="0" locFile="/BugDetective/integerOverflow.c" FirstElSrcRngStartln="23" FirstElSrcRngStartPos="0" FirstElSrcRngEndLn="24" FirstElSrcRngEndPos="0" FirstElSrcRngFile="/BugDetective/integerOverflow.c"><Props><Prop key="Tracked variables" val="Tainted data"/></Props><ElDescList><ElDesc srcRngStartln="18" srcRngStartPos="0" srcRngEndLn="19" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="18" ElType="." desc="int i, header_len;" rngLn="18"><Props/></ElDesc><ElDesc srcRngStartln="19" srcRngStartPos="0" srcRngEndLn="20" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="19" ElType="." desc="long msg_len;" rngLn="19"><Props/></ElDesc><ElDesc srcRngStartln="20" srcRngStartPos="0" srcRngEndLn="21" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="20" ElType="." desc="size_t total_len;" rngLn="20"><Props/></ElDesc><ElDesc srcRngStartln="21" srcRngStartPos="0" srcRngEndLn="22" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="21" ElType="." desc="char *msg;" rngLn="21"><Props/></ElDesc><ElDesc srcRngStartln="23" srcRngStartPos="0" srcRngEndLn="24" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="23" ElType=".C" desc="recv(socket, buffer, BUFFER_SIZE, MSG_NOSIGNAL);" rngLn="23"><Props><Prop key="Tracked variables" val="buffer[]"/></Props><Anns><Ann msg="Tainting point" kind="cause"/><Ann msg="Tainted data: buffer[]" kind="var"/></Anns></ElDesc><ElDesc srcRngStartln="24" srcRngStartPos="0" srcRngEndLn="25" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="24" ElType="." desc="msg_len = atol(buffer);" rngLn="24"><Props/></ElDesc><ElDesc srcRngStartln="25" srcRngStartPos="0" srcRngEndLn="26" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="25" ElType="." desc="header_len = strlen(header);" rngLn="25"><Props/></ElDesc><ElDesc srcRngStartln="26" srcRngStartPos="0" srcRngEndLn="27" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="26" ElType="." desc="total_len = header_len;" rngLn="26"><Props/></ElDesc><ElDesc srcRngStartln="27" srcRngStartPos="0" srcRngEndLn="28" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="27" ElType="." desc="total_len += msg_len; /* POSSIBLE INTEGER OVERFLOW HERE */" rngLn="27"><Props/></ElDesc><ElDesc srcRngStartln="29" srcRngStartPos="0" srcRngEndLn="30" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="29" ElType="." desc="msg = (char*)malloc(total_len); /* VIOLATION, USAGE OF OVERFLOWED VALUE */" rngLn="29"><Props/></ElDesc><ElDesc srcRngStartln="30" srcRngStartPos="0" srcRngEndLn="31" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="30" ElType="." desc="if (!msg) {" rngLn="30"><Props/><Anns><Ann msg="Condition evaluation: !msg (assuming false)" kind="condEval"/></Anns></ElDesc><ElDesc srcRngStartln="34" srcRngStartPos="0" srcRngEndLn="35" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="34" ElType="." desc="strcpy(msg, header);" rngLn="34"><Props/></ElDesc><ElDesc srcRngStartln="36" srcRngStartPos="0" srcRngEndLn="37" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="36" ElType="." desc="recv(socket, msg + msg_len, msg_len, MSG_NOSIGNAL);" rngLn="36"><Props/></ElDesc><ElDesc srcRngStartln="38" srcRngStartPos="0" srcRngEndLn="39" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="38" ElType=".P" desc="for (i = header_len; i &lt; total_len; i++) { /* VIOLATION, USAGE OF OVERFLOWED VALUE */" rngLn="38"><Props><Prop key="Tracked variables" val="buffer[]"/></Props><Anns><Ann msg="Tainted data: buffer[]" kind="var"/><Ann msg="Tainted data use in a loop condition" kind="point"/></Anns></ElDesc></ElDescList></FlowViol><FlowViol msg="Usage of possibly overflowed/underflowed value: total_len" ln="38" ruleSAFMsg="Point of using possibly overflowed/underflowed value" auth="root" sev="1" rule="BD-SECURITY-INTOVERF" ruleSCSCMsg="Point where value is defined by tainting function" tool="c++test" id="-1363473727" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="38" locStartPos="0" locEndLn="39" locEndPos="0" locFile="/BugDetective/integerOverflow.c" FirstElSrcRngStartln="23" FirstElSrcRngStartPos="0" FirstElSrcRngEndLn="24" FirstElSrcRngEndPos="0" FirstElSrcRngFile="/BugDetective/integerOverflow.c"><Props><Prop key="Tracked variables" val="Tainted data"/></Props><ElDescList><ElDesc srcRngStartln="18" srcRngStartPos="0" srcRngEndLn="19" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="18" ElType="." desc="int i, header_len;" rngLn="18"><Props/></ElDesc><ElDesc srcRngStartln="19" srcRngStartPos="0" srcRngEndLn="20" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="19" ElType="." desc="long msg_len;" rngLn="19"><Props/></ElDesc><ElDesc srcRngStartln="20" srcRngStartPos="0" srcRngEndLn="21" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="20" ElType="." desc="size_t total_len;" rngLn="20"><Props/></ElDesc><ElDesc srcRngStartln="21" srcRngStartPos="0" srcRngEndLn="22" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="21" ElType="." desc="char *msg;" rngLn="21"><Props/></ElDesc><ElDesc srcRngStartln="23" srcRngStartPos="0" srcRngEndLn="24" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="23" ElType=".C" desc="recv(socket, buffer, BUFFER_SIZE, MSG_NOSIGNAL);" rngLn="23"><Props><Prop key="Tracked variables" val="buffer[]"/></Props><Anns><Ann msg="Point where value is defined by tainting function" kind="cause"/><Ann msg="Tainted data: buffer[]" kind="var"/></Anns></ElDesc><ElDesc srcRngStartln="24" srcRngStartPos="0" srcRngEndLn="25" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="24" ElType="!" desc="msg_len = atol(buffer);" rngLn="24"><Props/></ElDesc><ElDesc srcRngStartln="25" srcRngStartPos="0" srcRngEndLn="26" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="25" ElType="." desc="header_len = strlen(header);" rngLn="25"><Props><Prop key="Tracked variables" val="msg_len"/></Props><Anns><Ann msg="Tainted data: msg_len" kind="var"/></Anns></ElDesc><ElDesc srcRngStartln="26" srcRngStartPos="0" srcRngEndLn="27" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="26" ElType="." desc="total_len = header_len;" rngLn="26"><Props/></ElDesc><ElDesc srcRngStartln="27" srcRngStartPos="0" srcRngEndLn="28" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="27" ElType="!" desc="total_len += msg_len; /* POSSIBLE INTEGER OVERFLOW HERE */" rngLn="27"><Props/><Anns><Ann msg="Point of possible overflow/underflow" kind="info"/></Anns></ElDesc><ElDesc srcRngStartln="29" srcRngStartPos="0" srcRngEndLn="30" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="29" ElType="." desc="msg = (char*)malloc(total_len); /* VIOLATION, USAGE OF OVERFLOWED VALUE */" rngLn="29"><Props><Prop key="Tracked variables" val="total_len"/></Props><Anns><Ann msg="Tainted data: total_len" kind="var"/></Anns></ElDesc><ElDesc srcRngStartln="30" srcRngStartPos="0" srcRngEndLn="31" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="30" ElType="." desc="if (!msg) {" rngLn="30"><Props/><Anns><Ann msg="Condition evaluation: !msg (assuming false)" kind="condEval"/></Anns></ElDesc><ElDesc srcRngStartln="34" srcRngStartPos="0" srcRngEndLn="35" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="34" ElType="." desc="strcpy(msg, header);" rngLn="34"><Props/></ElDesc><ElDesc srcRngStartln="36" srcRngStartPos="0" srcRngEndLn="37" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="36" ElType="." desc="recv(socket, msg + msg_len, msg_len, MSG_NOSIGNAL);" rngLn="36"><Props/></ElDesc><ElDesc srcRngStartln="38" srcRngStartPos="0" srcRngEndLn="39" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="38" ElType=".P" desc="for (i = header_len; i &lt; total_len; i++) { /* VIOLATION, USAGE OF OVERFLOWED VALUE */" rngLn="38"><Props><Prop key="Tracked variables" val="total_len"/></Props><Anns><Ann msg="Tainted data: total_len" kind="var"/><Ann msg="Point of using possibly overflowed/underflowed value" kind="point"/></Anns></ElDesc></ElDescList></FlowViol><FlowViol msg="Usage of possibly overflowed/underflowed value: total_len" ln="29" ruleSAFMsg="Point of using possibly overflowed/underflowed value" auth="root" sev="1" rule="BD-SECURITY-INTOVERF" ruleSCSCMsg="Point where value is defined by tainting function" tool="c++test" id="1907083985" lang="cpp" locType="sr" config="1" hash="-1197576192" locStartln="29" locStartPos="0" locEndLn="30" locEndPos="0" locFile="/BugDetective/integerOverflow.c" FirstElSrcRngStartln="23" FirstElSrcRngStartPos="0" FirstElSrcRngEndLn="24" FirstElSrcRngEndPos="0" FirstElSrcRngFile="/BugDetective/integerOverflow.c"><Props><Prop key="Tracked variables" val="Tainted data"/></Props><ElDescList><ElDesc srcRngStartln="18" srcRngStartPos="0" srcRngEndLn="19" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="18" ElType="." desc="int i, header_len;" rngLn="18"><Props/></ElDesc><ElDesc srcRngStartln="19" srcRngStartPos="0" srcRngEndLn="20" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="19" ElType="." desc="long msg_len;" rngLn="19"><Props/></ElDesc><ElDesc srcRngStartln="20" srcRngStartPos="0" srcRngEndLn="21" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="20" ElType="." desc="size_t total_len;" rngLn="20"><Props/></ElDesc><ElDesc srcRngStartln="21" srcRngStartPos="0" srcRngEndLn="22" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="21" ElType="." desc="char *msg;" rngLn="21"><Props/></ElDesc><ElDesc srcRngStartln="23" srcRngStartPos="0" srcRngEndLn="24" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="23" ElType=".C" desc="recv(socket, buffer, BUFFER_SIZE, MSG_NOSIGNAL);" rngLn="23"><Props><Prop key="Tracked variables" val="buffer[]"/></Props><Anns><Ann msg="Point where value is defined by tainting function" kind="cause"/><Ann msg="Tainted data: buffer[]" kind="var"/></Anns></ElDesc><ElDesc srcRngStartln="24" srcRngStartPos="0" srcRngEndLn="25" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="24" ElType="!" desc="msg_len = atol(buffer);" rngLn="24"><Props/></ElDesc><ElDesc srcRngStartln="25" srcRngStartPos="0" srcRngEndLn="26" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="25" ElType="." desc="header_len = strlen(header);" rngLn="25"><Props><Prop key="Tracked variables" val="msg_len"/></Props><Anns><Ann msg="Tainted data: msg_len" kind="var"/></Anns></ElDesc><ElDesc srcRngStartln="26" srcRngStartPos="0" srcRngEndLn="27" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="26" ElType="." desc="total_len = header_len;" rngLn="26"><Props/></ElDesc><ElDesc srcRngStartln="27" srcRngStartPos="0" srcRngEndLn="28" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="27" ElType="!" desc="total_len += msg_len; /* POSSIBLE INTEGER OVERFLOW HERE */" rngLn="27"><Props/><Anns><Ann msg="Point of possible overflow/underflow" kind="info"/></Anns></ElDesc><ElDesc srcRngStartln="29" srcRngStartPos="0" srcRngEndLn="30" srcRngEndPos="0" srcRngFile="/BugDetective/integerOverflow.c" srcRnghash="-1197576192" ln="29" ElType=".P" desc="malloc(...)" rngLn="29"><Props><Prop key="Tracked variables" val="total_len"/></Props><Anns><Ann msg="Tainted data: total_len" kind="var"/><Ann msg="Point of using possibly overflowed/underflowed value" kind="point"/></Anns></ElDesc></ElDescList></FlowViol></ResultInfo>
--o1XhT5JxchuqaoQqeoLBn7VCA8QePc5wffHmRXp--
