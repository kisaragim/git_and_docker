<?xml version='1.0' encoding='UTF-8'?>
<ResultsSession buildId="Default Project-2023-09-12" climode="true" execEnv="linux_x86_64" hasViols="true" id="1692827603609" lang="en_US" machine="d1212b955e38" prjModule="BugDetective" project="" tag="Flow Analysis Aggressive" time="2023-09-12T06:26:37+00:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2022.2.0" user="root">
   <TestConfig machine="d1212b955e38" name="Flow Analysis Aggressive" pseudoUrl="builtin://Flow Analysis Aggressive" user="root" />
   <Authors>
      <Author id="dev1" name="root" />
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.6.1.20221116" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.6.1.20221118B1887" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.desktop.files.in.scope" name="Helper Scope Analyzer for C/C++test Professional" ver="10.6.1.20221118B1887" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.6.1.20221118B1887" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.6.1.20221108B3828" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.6.1.20221118B1887" />
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1" />
   </VersionInfos>
   <Goals tsks="43">
      
   </Goals>
   <Scope>
      <Repositories />
      <Locations>
         <Loc auth="root" hash="-553123729" locRef="1" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="arrayOutOfBounds.c" totLns="48" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/arrayOutOfBounds.c" />
         <Loc auth="root" hash="1082458265" locRef="2" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="bufferOverflow.c" totLns="35" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/bufferOverflow.c" />
         <Loc auth="root" hash="-892903586" locRef="3" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="dbutil.c" totLns="17" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/dbutil.c" />
         <Loc auth="root" hash="1923244810" locRef="4" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="divisionByZero.c" totLns="58" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/divisionByZero.c" />
         <Loc auth="root" hash="1210532432" locRef="5" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="fileLeaks.c" totLns="60" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/fileLeaks.c" />
         <Loc auth="root" hash="-1197576192" locRef="6" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="integerOverflow.c" totLns="42" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/integerOverflow.c" />
         <Loc auth="root" hash="1502549011" locRef="7" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="memoryLeaks.c" totLns="46" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/memoryLeaks.c" />
         <Loc auth="root" hash="522847191" locRef="8" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="nullPointerDeref.c" totLns="43" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/nullPointerDeref.c" />
         <Loc auth="root" hash="-1583021683" locRef="9" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="nullPointerDerefBenchmark.c" totLns="79" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/nullPointerDerefBenchmark.c" />
         <Loc auth="root" hash="1115766966" locRef="10" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="sql.c" totLns="12" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/sql.c" />
         <Loc auth="root" hash="-1138451494" locRef="11" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="sqlInjection.c" totLns="37" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/sqlInjection.c" />
         <Loc auth="root" hash="1398926183" locRef="12" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="unreachableCode.c" totLns="68" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/unreachableCode.c" />
         <Loc auth="root" hash="-54878936" locRef="13" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="useBeforeInit.c" totLns="53" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/useBeforeInit.c" />
         <Loc auth="root" hash="-1106475955" locRef="14" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="socket.h" totLns="22" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/socket.h" />
         <Loc auth="root" hash="-390129458" locRef="15" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="dbutil.h" totLns="10" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/dbutil.h" />
         <Loc auth="root" hash="-1897154214" locRef="16" projId="BugDetective" projPath="/BugDetective" project="BugDetective" resProjPath="sql.h" totLns="28" uri="file://d1212b955e38/home/keio/git_and_docker_cpptest/git_and_docker/DevelopSampleProject/BugDetective/sql.h" />
      </Locations>
   </Scope>
   
  <SetupProblems />

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:07">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="16" checkedLns="658" id="BugDetective" name="BugDetective" qfixErrs="0" suppErrs="0" totErrs="43" totFiles="16" totLns="658" />
      </Projects>
      
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="Flow Analysis" name="BD" rules="125" total="0">
               <Category authTot="0;" authUrg="0;" desc="Incorrect API usage" name="BD-API" rules="7" total="0" />
               <Category authTot="31;" authUrg="31;" desc="Possible Bugs" name="BD-PB" rules="69" total="31" />
               <Category authTot="5;" authUrg="5;" desc="Resources" name="BD-RES" rules="8" total="5" />
               <Category authTot="7;" authUrg="7;" desc="Security" name="BD-SECURITY" rules="19" total="7" />
               <Category authTot="0;" authUrg="0;" desc="Containers" name="BD-CO" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Threads &amp; Synchronization" name="BD-TRS" rules="15" total="0" />
            </Category>
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass incorrect values to library functions" id="BD-API-BADPARAM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass negative values to functions expecting non-negative arguments" id="BD-API-NEGPARAM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not check for a non-negative value after passing as a non-negative argument" id="BD-API-REVNEGPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not access iterator out of range" id="BD-CO-ITOUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="BD-CO-STRMOD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not pass empty container iterators to std algorithms as destinations" id="BD-CO-EMPCON" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not modify container while iterating over it" id="BD-CO-ITMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always catch exceptions" id="BD-PB-EXCEPT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="2;" cat="BD-PB" desc="Avoid use before initialization" id="BD-PB-NOTINIT" sev="1" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="7;" authUrg="7;" cat="BD-PB" desc="Avoid null pointer dereferencing" id="BD-PB-NP" sev="1" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid buffer overflow due to defining incorrect format limits" id="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow due to reading a not zero terminated string" id="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when reading from a buffer" id="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="Avoid overflow when writing to a buffer" id="BD-PB-OVERFWR" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overwriting method parameters" id="BD-PB-POVR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not point to a wrapped object that has been freed" id="BD-PB-WRAPESC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="2;" cat="BD-PB" desc="Avoid division by zero" id="BD-PB-ZERO" sev="1" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="Avoid accessing arrays out of bounds" id="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="BD-PB-ARRPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid incorrect shift operations" id="BD-PB-BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use the correct byte ordering when transferring data between systems" id="BD-PB-BYTEORD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="5;" authUrg="5;" cat="BD-PB" desc="Avoid conditions that always evaluate to the same value" id="BD-PB-CC" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Consistently check the returned value of non-void functions" id="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="5;" authUrg="5;" cat="BD-PB" desc="Always check the returned value of non-void function" id="BD-PB-CHECKRETGEN" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="Do not check for null after dereferencing" id="BD-PB-DEREF" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify the alignment of objects by calling realloc()" id="BD-PB-DNMPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="BD-PB-EOFCOMP" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly use errno value" id="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define exit handlers" id="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="Reset strings on fgets() or fgetws() failure" id="BD-PB-FGETS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Only use values for fsetpos() that are returned from fgetpos()" id="BD-PB-FSETPOS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="BD-PB-INVENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="BD-PB-INVRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid calls to memory-setting functions that can be optimized out by the compiler" id="BD-PB-MEMOPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define new handlers" id="BD-PB-NEWHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid throwing exceptions from functions that are declared not to throw" id="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Never return from functions that should not return" id="BD-PB-NORETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays and pointers out of bounds" id="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="An object shall not be assigned or copied to an overlapping object" id="BD-PB-OVERLAP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not treat arrays polymorphically" id="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not compare two unrelated pointers" id="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subtract two pointers that do not address elements of the same array" id="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="BD-PB-PTRVALUE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="BD-PB-PUTENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define signal handlers" id="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not return from a computational exception signal handler" id="BD-PB-SIGRETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subsequently use the argument to std::forward" id="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on the value of a moved-from object" id="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="Avoid switch with unreachable branches" id="BD-PB-SWITCH" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define terminate handlers" id="BD-PB-TERMHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define unexpected handlers" id="BD-PB-UNEXPHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use the ungetc function on a stream with the file position indicator zero" id="BD-PB-UNGETC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under construction" id="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under destruction" id="BD-PB-VDTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the size of the variable length array is in valid range" id="BD-PB-VLASIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The same file shall not be opened for read and write access at the same time on different streams" id="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid writing to a stream which has been opened as read only" id="BD-PB-WRROS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid integer overflows" id="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure strings are zero terminated" id="BD-PB-NZTS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the output buffer is large enough when using path manipulation functions" id="BD-PB-PATHBUF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always throw the created std::exception object" id="BD-PB-STDEXC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Suspicious setting of stream flags" id="BD-PB-STREAMFLAGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Restore stream format" id="BD-PB-STREAMFMT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="4;" authUrg="4;" cat="BD-PB" desc="Avoid unused values" id="BD-PB-VOVR" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Guarantee that container indices are within the valid range" id="BD-PB-VALRANGE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Properly deallocate dynamically allocated resources" id="BD-RES-BADDEALLOC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Ensure deallocation functions guarantee resource freeing" id="BD-RES-BADFREEF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not use resources that have been freed" id="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Allocate sufficient memory to hold an object of a given type" id="BD-RES-INSUFMEM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not free resources using invalid pointers" id="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="5;" authUrg="5;" cat="BD-RES" desc="Ensure resources are freed" id="BD-RES-LEAKS" sev="1" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Avoid cyclic shared_ptr references" id="BD-RES-CSP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not create variables on the stack above the defined limits" id="BD-RES-STACKLIM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-SECURITY" desc="Avoid tainted data in array indexes" id="BD-SECURITY-ARRAY" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Prevent buffer overflows from tainted data" id="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="2;" cat="BD-SECURITY" desc="Protect against integer overflow/underflow from tainted data" id="BD-SECURITY-INTOVERF" sev="1" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="BD-SECURITY-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer read overflow from tainted data" id="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-SECURITY" desc="Avoid buffer write overflow from tainted data" id="BD-SECURITY-OVERFWR" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against command injection" id="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-SECURITY" desc="Avoid printing tainted data on the output console" id="BD-SECURITY-TDCONSOLE" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against environment injection" id="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against file name injection" id="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Exclude unsanitized user input from format strings" id="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used in the controlling expression of a loop" id="BD-SECURITY-TDLOOP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-SECURITY" desc="Protect against SQL injection" id="BD-SECURITY-TDSQL" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Properly seed pseudorandom number generators" id="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Sensitive data should be cleared before being deallocated" id="BD-SECURITY-SENSFREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid passing sensitive data to functions that write to log files" id="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="BD-SECURITY-TDALLOC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid double locking" id="BD-TRS-DLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions when using fork and file descriptors" id="BD-TRS-FORKFILE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not abandon unreleased locks" id="BD-TRS-LOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not acquire locks in different order" id="BD-TRS-ORDER" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while checking for the existence of a symbolic link" id="BD-TRS-SYMLINK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use blocking functions while holding a lock" id="BD-TRS-TSHL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="BD-TRS-ARG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Variable should be used in context of single critical section" id="BD-TRS-DIFCS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while accessing files" id="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not join or detach a thread that was previously joined or detached" id="BD-TRS-JOINDETACH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not release a lock that has not been acquired" id="BD-TRS-REVLOCK" sev="3" total="0" />
         </RulesList>
         <SeverityList>
            <Severity authTot="24;" authUrg="24;" id="1" total="24" />
            <Severity authTot="15;" authUrg="15;" id="2" total="15" />
            <Severity authTot="4;" authUrg="4;" id="3" total="4" />
         </SeverityList>
      </Rules>
      
  <Supps />

      
  <StdViols>
    <FlowViol msg="Value of &quot;git_test&quot; is never used" ln="12" locFile="/BugDetective/arrayOutOfBounds.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="13" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="-1209134850" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/BugDetective/arrayOutOfBounds.c" rule.header="Avoid unused values" FirstElSrcRngStartln="12" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-343441187" lang="cpp" violId="b6a36f60-8ba2-3c2a-9c7f-f4fec208d2ae" locEndPos="0" urgent="true" locEndLn="13" goals="1," locStartln="12" sev="3" locRef="1" tool="c++test" lineHash="-1209134850" unbViolId="be5d84dd-ebd5-3768-94d4-5edf624f901d" locType="sr" hash="-553123729" causeLocRef="1">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1209134850" ln="12" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-553123729" srcRngStartln="12" srcRngEndLn="13" srcRngFile="/BugDetective/arrayOutOfBounds.c" desc="int git_test = 0;" ElType="CP" rngLn="12">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;asasas&quot; is never used" ln="14" locFile="/BugDetective/arrayOutOfBounds.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="15" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="-329440608" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/BugDetective/arrayOutOfBounds.c" rule.header="Avoid unused values" FirstElSrcRngStartln="14" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2044490312" lang="cpp" violId="0882be2d-bcf4-37bc-b448-b56f7a080979" locEndPos="0" urgent="true" locEndLn="15" goals="1," locStartln="14" sev="3" locRef="1" tool="c++test" lineHash="-329440608" unbViolId="4214bd6a-068d-33c6-a58b-3e8ff7edafa6" locType="sr" hash="-553123729" causeLocRef="1">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-329440608" ln="14" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-553123729" srcRngStartln="14" srcRngEndLn="15" srcRngFile="/BugDetective/arrayOutOfBounds.c" desc="int asasas = 10;" ElType="CP" rngLn="14">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Data obtained from a console (&quot;id&quot;, possibly &lt;= -1 or >= 1000) is used to index an array Person *[1000]" ln="27" locFile="/BugDetective/arrayOutOfBounds.c" ruleSAFMsg="Call to a dangerous method" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="23" rule="BD-SECURITY-ARRAY" FirstElSrcRngStartPos="0" lnHash="1552118552" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/BugDetective/arrayOutOfBounds.c" rule.header="Avoid tainted data in array indexes" FirstElSrcRngStartln="22" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1816942363" lang="cpp" violId="bb1570dc-09dc-3907-a6bb-b7c6c678cfec" locEndPos="0" urgent="true" locEndLn="28" goals="1," locStartln="27" sev="1" locRef="1" tool="c++test" lineHash="1552118552" unbViolId="9294fa07-b9d9-351e-8bfc-c601bbc161e2" locType="sr" hash="-553123729" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="521020111" ln="20" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-553123729" srcRngStartln="20" srcRngEndLn="21" srcRngFile="/BugDetective/arrayOutOfBounds.c" desc="int id;" ElType="." rngLn="20" />
        <ElDesc lineHash="-1553784831" ln="21" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-553123729" srcRngStartln="21" srcRngEndLn="22" srcRngFile="/BugDetective/arrayOutOfBounds.c" desc="printf(&quot;Please enter person id: \n&quot;);" ElType="." rngLn="21" />
        <ElDesc lineHash="-1206504513" ln="22" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-553123729" srcRngStartln="22" srcRngEndLn="23" srcRngFile="/BugDetective/arrayOutOfBounds.c" desc="scanf(&quot;%d&quot;, &amp;id);" ElType=".C" rngLn="22">
          <Props>
            <Prop key="Tracked variables" val="id" />
          </Props>
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
            <Ann msg="Tainted data: id" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1552118552" ln="27" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-553123729" srcRngStartln="27" srcRngEndLn="28" srcRngFile="/BugDetective/arrayOutOfBounds.c" desc="if (cache[id] == 0) {" ElType=".P" rngLn="27">
          <Props>
            <Prop key="Tracked variables" val="id" />
          </Props>
          <Anns>
            <Ann msg="Tainted data: id" kind="var" />
            <Ann msg="Call to a dangerous method" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Possibly accessing array &quot;cache&quot; out of bounds at index [1...1000]. Correct index(es): [0...999]" ln="37" locFile="/BugDetective/arrayOutOfBounds.c" ruleSAFMsg="Out of bounds access point" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="45" rule="BD-PB-ARRAY" FirstElSrcRngStartPos="0" lnHash="308957226" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/BugDetective/arrayOutOfBounds.c" rule.header="Avoid accessing arrays out of bounds" FirstElSrcRngStartln="44" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1283572058" lang="cpp" violId="de701233-68ba-37fd-a0e0-a9a7c5ab112f" locEndPos="0" urgent="true" locEndLn="38" goals="1," locStartln="37" sev="2" locRef="1" tool="c++test" lineHash="308957226" unbViolId="1438172f-215d-32ce-a2c3-e6a8a44e6e20" locType="sr" hash="-553123729" causeLocRef="1">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1961341245" ln="44" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-553123729" srcRngStartln="44" srcRngEndLn="45" srcRngFile="/BugDetective/arrayOutOfBounds.c" desc="void clearAllCache()" ElType=".C" rngLn="44">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1825717159" ln="46" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-553123729" srcRngStartln="46" srcRngEndLn="47" srcRngFile="/BugDetective/arrayOutOfBounds.c" desc="clearCache(0, CACHE_SIZE /* -1 */ ); /* Uncomment to fix accessing out of bounds */" ElType="!" rngLn="46">
          <ElDescList>
            <ElDesc lineHash="1679375043" ln="35" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-553123729" srcRngStartln="35" srcRngEndLn="36" srcRngFile="/BugDetective/arrayOutOfBounds.c" desc="int i;" ElType="." rngLn="35" />
            <ElDesc lineHash="-1540506943" ln="36" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-553123729" srcRngStartln="36" srcRngEndLn="37" srcRngFile="/BugDetective/arrayOutOfBounds.c" desc="for (i = from_id; i &lt;= to_id; i++) {" ElType="." rngLn="36">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt;= to_id) (true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="308957226" ln="37" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-553123729" srcRngStartln="37" srcRngEndLn="38" srcRngFile="/BugDetective/arrayOutOfBounds.c" desc="if (cache[i] != 0) {" ElType="." rngLn="37">
              <Anns>
                <Ann msg="Condition evaluation: (cache[i] != 0) (assuming false)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="-1540506943" ln="36" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-553123729" srcRngStartln="36" srcRngEndLn="37" srcRngFile="/BugDetective/arrayOutOfBounds.c" desc="for (i = from_id; i &lt;= to_id; i++) {" ElType="." rngLn="36">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt;= to_id) (true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="308957226" ln="37" srcRngStartPos="0" srcRngEndPos="0" locRef="1" locType="sr" srcRnghash="-553123729" srcRngStartln="37" srcRngEndLn="38" srcRngFile="/BugDetective/arrayOutOfBounds.c" desc="if (cache[i] != 0) {" ElType=".P" rngLn="37">
              <Anns>
                <Ann msg="Out of bounds access point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Overflow when writing to buffer &quot;buffer&quot; (char[999], 999 bytes large). Number of bytes written is an arbitrary value possibly >= 999" ln="21" locFile="/BugDetective/bufferOverflow.c" ruleSAFMsg="Point where the buffer overflow occurs" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="14" rule="BD-SECURITY-OVERFWR" FirstElSrcRngStartPos="0" lnHash="-402612242" ruleSCSCMsg="Point where number of elements to write is defined by tainting function" FirstElSrcRngFile="/BugDetective/bufferOverflow.c" rule.header="Avoid buffer write overflow from tainted data" FirstElSrcRngStartln="13" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="40924891" lang="cpp" violId="cadb2b9d-0d5f-3c22-8ad2-eb5f4b9a96e5" locEndPos="0" urgent="true" locEndLn="22" goals="1," locStartln="21" sev="1" locRef="2" tool="c++test" lineHash="-402612242" unbViolId="a9347f2c-6048-3636-8b17-fe0776d43c29" locType="sr" hash="1082458265" causeLocRef="2">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
        <Prop key="Important values" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-664043208" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="1082458265" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/BugDetective/bufferOverflow.c" desc="int size, character;" ElType="." rngLn="11" />
        <ElDesc lineHash="-1303763578" ln="12" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="1082458265" srcRngStartln="12" srcRngEndLn="13" srcRngFile="/BugDetective/bufferOverflow.c" desc="printf(&quot;Please enter filling parameters: \n&quot;);" ElType="." rngLn="12" />
        <ElDesc lineHash="-2063599685" ln="13" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="1082458265" srcRngStartln="13" srcRngEndLn="14" srcRngFile="/BugDetective/bufferOverflow.c" desc="scanf(&quot;%d%d&quot;, &amp;size, &amp;character);" ElType=".C" rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="size" />
            <Prop key="Important values" val="char buffer[999]" />
          </Props>
          <Anns>
            <Ann msg="Point where number of elements to write is defined by tainting function" kind="cause" />
            <Ann msg="Tainted data: size" kind="var" />
            <Ann msg="Tainted data: char buffer[999]" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-402612242" ln="21" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="1082458265" srcRngStartln="21" srcRngEndLn="22" srcRngFile="/BugDetective/bufferOverflow.c" desc="memset(buffer, character, size); /* POSSIBLE BUFFER OVERFLOW HERE */" ElType=".P" rngLn="21">
          <Props>
            <Prop key="Tracked variables" val="size" />
            <Prop key="Important values" val="char buffer[999]" />
          </Props>
          <Anns>
            <Ann msg="Tainted data: size" kind="var" />
            <Ann msg="Tainted data: char buffer[999]" kind="var" />
            <Ann msg="Point where the buffer overflow occurs" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;i&quot; is never used" ln="26" locFile="/BugDetective/bufferOverflow.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="27" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="1679375043" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/BugDetective/bufferOverflow.c" rule.header="Avoid unused values" FirstElSrcRngStartln="26" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-824063767" lang="cpp" violId="3d62441f-bfc4-35c0-8f3b-daef2858808d" locEndPos="0" urgent="true" locEndLn="27" goals="1," locStartln="26" sev="3" locRef="2" tool="c++test" lineHash="1679375043" unbViolId="b55110e2-6486-3317-8730-18480253cf37" locType="sr" hash="1082458265" causeLocRef="2">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1679375043" ln="26" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="1082458265" srcRngStartln="26" srcRngEndLn="27" srcRngFile="/BugDetective/bufferOverflow.c" desc="int i;" ElType="CP" rngLn="26">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Overflow when writing to buffer &quot;buffer&quot; (char[999], 999 bytes large). Number of bytes written = 1000" ln="27" locFile="/BugDetective/bufferOverflow.c" ruleSAFMsg="Point where the buffer overflow occurs" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="28" rule="BD-PB-OVERFWR" FirstElSrcRngStartPos="0" lnHash="1283866216" ruleSCSCMsg="Point where number of elements to write is defined" FirstElSrcRngFile="/BugDetective/bufferOverflow.c" rule.header="Avoid overflow when writing to a buffer" FirstElSrcRngStartln="27" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-334608489" lang="cpp" violId="b27efdd0-b0ef-3c72-a583-9843c0d584ad" locEndPos="0" urgent="true" locEndLn="28" goals="1," locStartln="27" sev="1" locRef="2" tool="c++test" lineHash="1283866216" unbViolId="629958f8-08fc-3f3b-a754-2bd0434f41b8" locType="sr" hash="1082458265" causeLocRef="2">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1212873409" ln="33" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="1082458265" srcRngStartln="33" srcRngEndLn="34" srcRngFile="/BugDetective/bufferOverflow.c" desc="resetBuffer(1000 /* BUFFER_SIZE */); /* POSSIBLE BUFFER OVERFLOW HERE */" ElType="!" rngLn="33">
          <ElDescList>
            <ElDesc lineHash="1679375043" ln="26" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="1082458265" srcRngStartln="26" srcRngEndLn="27" srcRngFile="/BugDetective/bufferOverflow.c" desc="int i;" ElType="." rngLn="26" />
            <ElDesc lineHash="1283866216" ln="27" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="1082458265" srcRngStartln="27" srcRngEndLn="28" srcRngFile="/BugDetective/bufferOverflow.c" desc="memset(buffer, 0, size);" ElType="CP" rngLn="27">
              <Anns>
                <Ann msg="Point where number of elements to write is defined" kind="cause" />
                <Ann msg="Point where the buffer overflow occurs" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;person->daysWorkedInPassedMonth&quot; which may possibly be zero" ln="9" locFile="/BugDetective/divisionByZero.c" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="19" rule="BD-PB-ZERO" FirstElSrcRngStartPos="0" lnHash="-969021421" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/BugDetective/divisionByZero.c" rule.header="Avoid division by zero" FirstElSrcRngStartln="18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1716935372" lang="cpp" violId="80873910-e07f-36d9-8534-b5574396cec3" locEndPos="0" urgent="true" locEndLn="10" goals="1," locStartln="9" sev="1" locRef="4" tool="c++test" lineHash="-969021421" unbViolId="3ac053f9-376e-3eda-9e46-aa0a5c05839e" locType="sr" hash="1923244810" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1706567659" ln="18" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="1923244810" srcRngStartln="18" srcRngEndLn="19" srcRngFile="/BugDetective/divisionByZero.c" desc="p->daysWorkedInPassedMonth = 0;" ElType=".C" rngLn="18">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="417141098" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="1923244810" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/BugDetective/divisionByZero.c" desc="displayPersonalInfo(p);" ElType="!" rngLn="19">
          <ElDescList>
            <ElDesc lineHash="-194506379" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="1923244810" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/BugDetective/divisionByZero.c" desc="printf(&quot;Name: %s\n&quot;, person->name);" ElType="." rngLn="7" />
            <ElDesc lineHash="-1754501628" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="1923244810" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/BugDetective/divisionByZero.c" desc="printf(&quot;Salary: %d\n&quot;, person->salary);" ElType="." rngLn="8" />
            <ElDesc lineHash="-969021421" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="1923244810" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/BugDetective/divisionByZero.c" desc="printf(&quot;Day's pay: %d\n&quot;, person->salary/person->daysWorkedInPassedMonth);" ElType=".P" rngLn="9">
              <Anns>
                <Ann msg="Point of division by zero" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;numberOfEmployees&quot; which may possibly be zero" ln="26" locFile="/BugDetective/divisionByZero.c" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="54" rule="BD-PB-ZERO" FirstElSrcRngStartPos="0" lnHash="-1503128871" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/BugDetective/divisionByZero.c" rule.header="Avoid division by zero" FirstElSrcRngStartln="53" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-440383681" lang="cpp" violId="254b7b7a-873e-3d13-845c-0a835b380082" locEndPos="0" urgent="true" locEndLn="27" goals="1," locStartln="26" sev="1" locRef="4" tool="c++test" lineHash="-1503128871" unbViolId="000f2d5c-a51d-39d0-8dfc-0b4c45850dc9" locType="sr" hash="1923244810" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="2068113868" ln="53" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="1923244810" srcRngStartln="53" srcRngEndLn="54" srcRngFile="/BugDetective/divisionByZero.c" desc="numberOfEmployees = processFile(file, employees);" ElType=".C" rngLn="53">
          <ElDescList>
            <ElDesc lineHash="-1256396037" ln="41" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="1923244810" srcRngStartln="41" srcRngEndLn="42" srcRngFile="/BugDetective/divisionByZero.c" desc="return 0;" ElType="!" rngLn="41">
              <Anns>
                <Ann msg="Returning value: 0" kind="valEval" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
            <Ann msg="Variable assignment: numberOfEmployees = processFile(file,employees) -> numberOfEmployees = 0" kind="valEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-337476011" ln="54" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="1923244810" srcRngStartln="54" srcRngEndLn="55" srcRngFile="/BugDetective/divisionByZero.c" desc="processStaff(employees, numberOfEmployees);" ElType="!" rngLn="54">
          <ElDescList>
            <ElDesc lineHash="727882071" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="1923244810" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/BugDetective/divisionByZero.c" desc="void processStaff(Person* employees[], int sizeOfStaff)" ElType="!" rngLn="29">
              <Anns>
                <Ann msg="Parameter value: sizeOfStaff = numberOfEmployees -> sizeOfStaff = 0" kind="valEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1679375043" ln="31" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="1923244810" srcRngStartln="31" srcRngEndLn="32" srcRngFile="/BugDetective/divisionByZero.c" desc="int i;" ElType="." rngLn="31" />
            <ElDesc lineHash="882805155" ln="32" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="1923244810" srcRngStartln="32" srcRngEndLn="33" srcRngFile="/BugDetective/divisionByZero.c" desc="for (i = 0; i &lt; sizeOfStaff; ++i) {" ElType="." rngLn="32">
              <Anns>
                <Ann msg="Loop condition evaluation: (i &lt; sizeOfStaff) (false)" kind="condEval" />
                <Ann msg="Not entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="-1642911173" ln="35" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="1923244810" srcRngStartln="35" srcRngEndLn="36" srcRngFile="/BugDetective/divisionByZero.c" desc="calculateAverageSalary(...)" ElType="!" rngLn="35">
              <ElDescList>
                <ElDesc lineHash="1420344907" ln="23" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="1923244810" srcRngStartln="23" srcRngEndLn="24" srcRngFile="/BugDetective/divisionByZero.c" desc="int calculateAverageSalary(int numberOfEmployees)" ElType="!" rngLn="23">
                  <Anns>
                    <Ann msg="Parameter value: numberOfEmployees = sizeOfStaff -> numberOfEmployees = 0" kind="valEval" />
                  </Anns>
                </ElDesc>
                <ElDesc lineHash="-306300958" ln="25" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="1923244810" srcRngStartln="25" srcRngEndLn="26" srcRngFile="/BugDetective/divisionByZero.c" desc="int WAGE_FUND = 10000;" ElType="." rngLn="25" />
                <ElDesc lineHash="-1503128871" ln="26" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="1923244810" srcRngStartln="26" srcRngEndLn="27" srcRngFile="/BugDetective/divisionByZero.c" desc="return WAGE_FUND/numberOfEmployees;" ElType=".P" rngLn="26">
                  <Anns>
                    <Ann msg="Point of division by zero" kind="point" />
                  </Anns>
                </ElDesc>
              </ElDescList>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The EOF macro is compared with the modified value returned by the &quot;fgetc&quot; function" ln="15" locFile="/BugDetective/fileLeaks.c" ruleSAFMsg="Comparing value with EOF" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="15" rule="BD-PB-EOFCOMP" FirstElSrcRngStartPos="0" lnHash="161967170" ruleSCSCMsg="Invoke function capable of returning EOF" FirstElSrcRngFile="/BugDetective/fileLeaks.c" rule.header="The macro EOF should be compared with the unmodified return value from the Standard Library function" FirstElSrcRngStartln="14" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="910895208" lang="cpp" violId="9cce4ca0-8b9b-3647-91af-b7c30d717b1d" locEndPos="0" urgent="true" locEndLn="16" goals="1," locStartln="15" sev="2" locRef="5" tool="c++test" lineHash="161967170" unbViolId="b38aa048-4d1c-3eb9-b837-7396bb6371eb" locType="sr" hash="1210532432" causeLocRef="5">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1093133731" ln="14" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="14" srcRngEndLn="15" srcRngFile="/BugDetective/fileLeaks.c" desc="fgetc(...)" ElType=".C" rngLn="14">
          <Anns>
            <Ann msg="Invoke function capable of returning EOF" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1093133731" ln="14" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="14" srcRngEndLn="15" srcRngFile="/BugDetective/fileLeaks.c" desc="c = fgetc(file);" ElType="!" rngLn="14">
          <Anns>
            <Ann msg="Casting int -> char" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="161967170" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/BugDetective/fileLeaks.c" desc="if (c!=EOF) {" ElType=".P" rngLn="15">
          <Anns>
            <Ann msg="Casting char -> int" kind="comment" />
            <Ann msg="Comparing value with EOF" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Data obtained from a file (&quot;c&quot;) is printed on a console" ln="16" locFile="/BugDetective/fileLeaks.c" ruleSAFMsg="Call to a dangerous method" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="15" rule="BD-SECURITY-TDCONSOLE" FirstElSrcRngStartPos="0" lnHash="-1245723280" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/BugDetective/fileLeaks.c" rule.header="Avoid printing tainted data on the output console" FirstElSrcRngStartln="14" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="729845392" lang="cpp" violId="d538579a-d92d-3b9d-ad88-2c9d91f0d611" locEndPos="0" urgent="true" locEndLn="17" goals="1," locStartln="16" sev="1" locRef="5" tool="c++test" lineHash="-1245723280" unbViolId="789dd84f-90fb-3167-8489-7d148c4634ee" locType="sr" hash="1210532432" causeLocRef="5">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-695983806" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/BugDetective/fileLeaks.c" desc="char c;" ElType="." rngLn="11" />
        <ElDesc lineHash="1807758733" ln="12" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="12" srcRngEndLn="13" srcRngFile="/BugDetective/fileLeaks.c" desc="printf(&quot;Reading file contents:\n\n&quot;);" ElType="." rngLn="12" />
        <ElDesc lineHash="66462730" ln="13" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="13" srcRngEndLn="14" srcRngFile="/BugDetective/fileLeaks.c" desc="while(1) {" ElType="." rngLn="13">
          <Anns>
            <Ann msg="Loop condition evaluation: 1 (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1093133731" ln="14" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="14" srcRngEndLn="15" srcRngFile="/BugDetective/fileLeaks.c" desc="fgetc(...)" ElType=".C" rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="fgetc(...)" />
          </Props>
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
            <Ann msg="Tainted data: fgetc(...)" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1093133731" ln="14" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="14" srcRngEndLn="15" srcRngFile="/BugDetective/fileLeaks.c" desc="c = fgetc(file);" ElType="!" rngLn="14" />
        <ElDesc lineHash="161967170" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/BugDetective/fileLeaks.c" desc="if (c!=EOF) {" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="c" />
          </Props>
          <Anns>
            <Ann msg="Tainted data: c" kind="var" />
            <Ann msg="Condition evaluation: (c != -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1245723280" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/BugDetective/fileLeaks.c" desc="printf(&quot;%c&quot;, c);" ElType=".P" rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="c" />
          </Props>
          <Anns>
            <Ann msg="Tainted data: c" kind="var" />
            <Ann msg="Call to a dangerous method" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="File not closed: file" ln="36" locFile="/BugDetective/fileLeaks.c" ruleSAFMsg="Point where opened file is lost" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="27" rule="BD-RES-LEAKS" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where file is opened" FirstElSrcRngFile="/BugDetective/fileLeaks.c" rule.header="Ensure resources are freed" FirstElSrcRngStartln="26" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1573681103" lang="cpp" violId="61b4213e-a337-3795-9f65-d80fa7eaa4ea" locEndPos="0" urgent="true" locEndLn="37" goals="1," locStartln="36" sev="1" locRef="5" tool="c++test" lineHash="125" unbViolId="d2d07c94-dba0-348e-9f73-e522c7b54caf" locType="sr" hash="1210532432" causeLocRef="5">
      <Props>
        <Prop key="Tracked variables" val="Opened file" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1954950279" ln="25" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="25" srcRngEndLn="26" srcRngFile="/BugDetective/fileLeaks.c" desc="FILE *file;" ElType="." rngLn="25" />
        <ElDesc lineHash="663570683" ln="26" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="26" srcRngEndLn="27" srcRngFile="/BugDetective/fileLeaks.c" desc="file = fopen(&quot;myfile.txt&quot;, &quot;r&quot;);" ElType=".C" rngLn="26">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
          <Anns>
            <Ann msg="Point where file is opened" kind="cause" />
            <Ann msg="Opened file: file" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1958866940" ln="27" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="27" srcRngEndLn="28" srcRngFile="/BugDetective/fileLeaks.c" desc="if (file==NULL) {" ElType="." rngLn="27">
          <Anns>
            <Ann msg="Condition evaluation: (file == 0) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1833015213" ln="31" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="31" srcRngEndLn="32" srcRngFile="/BugDetective/fileLeaks.c" desc="printf(&quot;File successfully opened.\n\n&quot;);" ElType="." rngLn="31" />
        <ElDesc lineHash="178811885" ln="32" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="32" srcRngEndLn="33" srcRngFile="/BugDetective/fileLeaks.c" desc="printFile(file);" ElType="." rngLn="32">
          <ElDescList>
            <ElDesc lineHash="-695983806" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/BugDetective/fileLeaks.c" desc="char c;" ElType="." rngLn="11">
              <Props>
                <Prop key="Tracked variables" val="file" />
              </Props>
              <Anns>
                <Ann msg="Opened file: file" kind="var" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1807758733" ln="12" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="12" srcRngEndLn="13" srcRngFile="/BugDetective/fileLeaks.c" desc="printf(&quot;Reading file contents:\n\n&quot;);" ElType="." rngLn="12" />
            <ElDesc lineHash="66462730" ln="13" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="13" srcRngEndLn="14" srcRngFile="/BugDetective/fileLeaks.c" desc="while(1) {" ElType="." rngLn="13">
              <Anns>
                <Ann msg="Loop condition evaluation: 1 (true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1093133731" ln="14" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="14" srcRngEndLn="15" srcRngFile="/BugDetective/fileLeaks.c" desc="c = fgetc(file);" ElType="." rngLn="14" />
            <ElDesc lineHash="161967170" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/BugDetective/fileLeaks.c" desc="if (c!=EOF) {" ElType="." rngLn="15">
              <Anns>
                <Ann msg="Condition evaluation: (c != -1) (assuming false)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="207609628" ln="18" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="18" srcRngEndLn="19" srcRngFile="/BugDetective/fileLeaks.c" desc="break;" ElType="." rngLn="18">
              <Anns>
                <Ann msg="Exit the loop" kind="condEval" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1256396037" ln="35" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="35" srcRngEndLn="36" srcRngFile="/BugDetective/fileLeaks.c" desc="return 0;" ElType="." rngLn="35" />
        <ElDesc lineHash="125" ln="36" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="36" srcRngEndLn="37" srcRngFile="/BugDetective/fileLeaks.c" desc="}" ElType=".P" rngLn="36">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
          <Anns>
            <Ann msg="Opened file: file" kind="var" />
            <Ann msg="Point where opened file is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="File not closed: file" ln="49" locFile="/BugDetective/fileLeaks.c" ruleSAFMsg="Point where opened file is lost" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="50" rule="BD-RES-LEAKS" FirstElSrcRngStartPos="0" lnHash="1237972298" ruleSCSCMsg="Point where file is opened" FirstElSrcRngFile="/BugDetective/fileLeaks.c" rule.header="Ensure resources are freed" FirstElSrcRngStartln="49" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="603044296" lang="cpp" violId="757d03d5-ad8c-3103-9abe-fbeb875ddc3e" locEndPos="0" urgent="true" locEndLn="50" goals="1," locStartln="49" sev="1" locRef="5" tool="c++test" lineHash="1237972298" unbViolId="bc718170-fb0f-359d-92cd-92897293a5b2" locType="sr" hash="1210532432" causeLocRef="5">
      <Props>
        <Prop key="Tracked variables" val="Opened file" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="1104249178" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/BugDetective/fileLeaks.c" desc="int ARRSIZE = 3;" ElType="." rngLn="40" />
        <ElDesc lineHash="1679375043" ln="46" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="46" srcRngEndLn="47" srcRngFile="/BugDetective/fileLeaks.c" desc="int i;" ElType="." rngLn="46" />
        <ElDesc lineHash="-587502381" ln="47" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="47" srcRngEndLn="48" srcRngFile="/BugDetective/fileLeaks.c" desc="FILE *file = NULL;" ElType="." rngLn="47" />
        <ElDesc lineHash="1072446173" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/BugDetective/fileLeaks.c" desc="for (i = 0; i &lt; ARRSIZE; ++i) {" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; ARRSIZE) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1237972298" ln="49" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="49" srcRngEndLn="50" srcRngFile="/BugDetective/fileLeaks.c" desc="file = fopen(names[i], &quot;r&quot;);" ElType=".C" rngLn="49">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
          <Anns>
            <Ann msg="Point where file is opened" kind="cause" />
            <Ann msg="Opened file: file" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1109565686" ln="50" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="50" srcRngEndLn="51" srcRngFile="/BugDetective/fileLeaks.c" desc="if(file==NULL) {" ElType="." rngLn="50">
          <Anns>
            <Ann msg="Condition evaluation: (file == 0) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="887323629" ln="54" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="54" srcRngEndLn="55" srcRngFile="/BugDetective/fileLeaks.c" desc="printFile(file);" ElType="." rngLn="54">
          <ElDescList>
            <ElDesc lineHash="-695983806" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/BugDetective/fileLeaks.c" desc="char c;" ElType="." rngLn="11">
              <Props>
                <Prop key="Tracked variables" val="file" />
              </Props>
              <Anns>
                <Ann msg="Opened file: file" kind="var" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1807758733" ln="12" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="12" srcRngEndLn="13" srcRngFile="/BugDetective/fileLeaks.c" desc="printf(&quot;Reading file contents:\n\n&quot;);" ElType="." rngLn="12" />
            <ElDesc lineHash="66462730" ln="13" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="13" srcRngEndLn="14" srcRngFile="/BugDetective/fileLeaks.c" desc="while(1) {" ElType="." rngLn="13">
              <Anns>
                <Ann msg="Loop condition evaluation: 1 (true)" kind="condEval" />
                <Ann msg="Entering the loop" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1093133731" ln="14" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="14" srcRngEndLn="15" srcRngFile="/BugDetective/fileLeaks.c" desc="c = fgetc(file);" ElType="." rngLn="14" />
            <ElDesc lineHash="161967170" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/BugDetective/fileLeaks.c" desc="if (c!=EOF) {" ElType="." rngLn="15">
              <Anns>
                <Ann msg="Condition evaluation: (c != -1) (assuming false)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="207609628" ln="18" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="18" srcRngEndLn="19" srcRngFile="/BugDetective/fileLeaks.c" desc="break;" ElType="." rngLn="18">
              <Anns>
                <Ann msg="Exit the loop" kind="condEval" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1072446173" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/BugDetective/fileLeaks.c" desc="for (i = 0; i &lt; ARRSIZE; ++i) {" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; ARRSIZE) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1237972298" ln="49" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1210532432" srcRngStartln="49" srcRngEndLn="50" srcRngFile="/BugDetective/fileLeaks.c" desc="file = fopen(names[i], &quot;r&quot;);" ElType=".P" rngLn="49">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
          <Anns>
            <Ann msg="Opened file: file" kind="var" />
            <Ann msg="Point where opened file is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Usage of possibly overflowed/underflowed value: total_len" ln="29" locFile="/BugDetective/integerOverflow.c" ruleSAFMsg="Point of using possibly overflowed/underflowed value" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="24" rule="BD-SECURITY-INTOVERF" FirstElSrcRngStartPos="0" lnHash="-711727233" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/BugDetective/integerOverflow.c" rule.header="Protect against integer overflow/underflow from tainted data" FirstElSrcRngStartln="23" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1907083985" lang="cpp" violId="5b1e9a3a-a4be-35ec-84f2-43c266ece051" locEndPos="0" urgent="true" locEndLn="30" goals="1," locStartln="29" sev="1" locRef="6" tool="c++test" lineHash="-711727233" unbViolId="da92147b-1ec6-3fa9-9549-c7a7c6f4dfd0" locType="sr" hash="-1197576192" causeLocRef="6">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-728176747" ln="18" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="18" srcRngEndLn="19" srcRngFile="/BugDetective/integerOverflow.c" desc="int i, header_len;" ElType="." rngLn="18" />
        <ElDesc lineHash="1710618239" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/BugDetective/integerOverflow.c" desc="long msg_len;" ElType="." rngLn="19" />
        <ElDesc lineHash="184186530" ln="20" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="20" srcRngEndLn="21" srcRngFile="/BugDetective/integerOverflow.c" desc="size_t total_len;" ElType="." rngLn="20" />
        <ElDesc lineHash="339000195" ln="21" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="21" srcRngEndLn="22" srcRngFile="/BugDetective/integerOverflow.c" desc="char *msg;" ElType="." rngLn="21" />
        <ElDesc lineHash="762177369" ln="23" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="23" srcRngEndLn="24" srcRngFile="/BugDetective/integerOverflow.c" desc="recv(socket, buffer, BUFFER_SIZE, MSG_NOSIGNAL);" ElType=".C" rngLn="23">
          <Props>
            <Prop key="Tracked variables" val="buffer[]" />
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause" />
            <Ann msg="Tainted data: buffer[]" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="63245237" ln="24" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="24" srcRngEndLn="25" srcRngFile="/BugDetective/integerOverflow.c" desc="msg_len = atol(buffer);" ElType="!" rngLn="24" />
        <ElDesc lineHash="1998902284" ln="25" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="25" srcRngEndLn="26" srcRngFile="/BugDetective/integerOverflow.c" desc="header_len = strlen(header);" ElType="." rngLn="25">
          <Props>
            <Prop key="Tracked variables" val="msg_len" />
          </Props>
          <Anns>
            <Ann msg="Tainted data: msg_len" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-295809370" ln="26" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="26" srcRngEndLn="27" srcRngFile="/BugDetective/integerOverflow.c" desc="total_len = header_len;" ElType="." rngLn="26" />
        <ElDesc lineHash="-1332386784" ln="27" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="27" srcRngEndLn="28" srcRngFile="/BugDetective/integerOverflow.c" desc="total_len += msg_len; /* POSSIBLE INTEGER OVERFLOW HERE */" ElType="!" rngLn="27">
          <Anns>
            <Ann msg="Point of possible overflow/underflow" kind="info" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-711727233" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/BugDetective/integerOverflow.c" desc="malloc(...)" ElType=".P" rngLn="29">
          <Props>
            <Prop key="Tracked variables" val="total_len" />
          </Props>
          <Anns>
            <Ann msg="Tainted data: total_len" kind="var" />
            <Ann msg="Point of using possibly overflowed/underflowed value" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Usage of possibly overflowed/underflowed value: total_len" ln="38" locFile="/BugDetective/integerOverflow.c" ruleSAFMsg="Point of using possibly overflowed/underflowed value" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="24" rule="BD-SECURITY-INTOVERF" FirstElSrcRngStartPos="0" lnHash="-1145053432" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/BugDetective/integerOverflow.c" rule.header="Protect against integer overflow/underflow from tainted data" FirstElSrcRngStartln="23" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1363473727" lang="cpp" violId="94953e6b-9ec1-30fe-910c-45f36826ab95" locEndPos="0" urgent="true" locEndLn="39" goals="1," locStartln="38" sev="1" locRef="6" tool="c++test" lineHash="-1145053432" unbViolId="f739858e-8eda-3f29-a0eb-f4922e62cb1e" locType="sr" hash="-1197576192" causeLocRef="6">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-728176747" ln="18" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="18" srcRngEndLn="19" srcRngFile="/BugDetective/integerOverflow.c" desc="int i, header_len;" ElType="." rngLn="18" />
        <ElDesc lineHash="1710618239" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/BugDetective/integerOverflow.c" desc="long msg_len;" ElType="." rngLn="19" />
        <ElDesc lineHash="184186530" ln="20" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="20" srcRngEndLn="21" srcRngFile="/BugDetective/integerOverflow.c" desc="size_t total_len;" ElType="." rngLn="20" />
        <ElDesc lineHash="339000195" ln="21" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="21" srcRngEndLn="22" srcRngFile="/BugDetective/integerOverflow.c" desc="char *msg;" ElType="." rngLn="21" />
        <ElDesc lineHash="762177369" ln="23" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="23" srcRngEndLn="24" srcRngFile="/BugDetective/integerOverflow.c" desc="recv(socket, buffer, BUFFER_SIZE, MSG_NOSIGNAL);" ElType=".C" rngLn="23">
          <Props>
            <Prop key="Tracked variables" val="buffer[]" />
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause" />
            <Ann msg="Tainted data: buffer[]" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="63245237" ln="24" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="24" srcRngEndLn="25" srcRngFile="/BugDetective/integerOverflow.c" desc="msg_len = atol(buffer);" ElType="!" rngLn="24" />
        <ElDesc lineHash="1998902284" ln="25" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="25" srcRngEndLn="26" srcRngFile="/BugDetective/integerOverflow.c" desc="header_len = strlen(header);" ElType="." rngLn="25">
          <Props>
            <Prop key="Tracked variables" val="msg_len" />
          </Props>
          <Anns>
            <Ann msg="Tainted data: msg_len" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-295809370" ln="26" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="26" srcRngEndLn="27" srcRngFile="/BugDetective/integerOverflow.c" desc="total_len = header_len;" ElType="." rngLn="26" />
        <ElDesc lineHash="-1332386784" ln="27" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="27" srcRngEndLn="28" srcRngFile="/BugDetective/integerOverflow.c" desc="total_len += msg_len; /* POSSIBLE INTEGER OVERFLOW HERE */" ElType="!" rngLn="27">
          <Anns>
            <Ann msg="Point of possible overflow/underflow" kind="info" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-711727233" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/BugDetective/integerOverflow.c" desc="msg = (char*)malloc(total_len); /* VIOLATION, USAGE OF OVERFLOWED VALUE */" ElType="." rngLn="29">
          <Props>
            <Prop key="Tracked variables" val="total_len" />
          </Props>
          <Anns>
            <Ann msg="Tainted data: total_len" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="37614934" ln="30" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="30" srcRngEndLn="31" srcRngFile="/BugDetective/integerOverflow.c" desc="if (!msg) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Condition evaluation: !msg (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="191649072" ln="34" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="34" srcRngEndLn="35" srcRngFile="/BugDetective/integerOverflow.c" desc="strcpy(msg, header);" ElType="." rngLn="34" />
        <ElDesc lineHash="1570251949" ln="36" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="36" srcRngEndLn="37" srcRngFile="/BugDetective/integerOverflow.c" desc="recv(socket, msg + msg_len, msg_len, MSG_NOSIGNAL);" ElType="." rngLn="36" />
        <ElDesc lineHash="-1145053432" ln="38" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="38" srcRngEndLn="39" srcRngFile="/BugDetective/integerOverflow.c" desc="for (i = header_len; i &lt; total_len; i++) { /* VIOLATION, USAGE OF OVERFLOWED VALUE */" ElType=".P" rngLn="38">
          <Props>
            <Prop key="Tracked variables" val="total_len" />
          </Props>
          <Anns>
            <Ann msg="Tainted data: total_len" kind="var" />
            <Ann msg="Point of using possibly overflowed/underflowed value" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Data obtained from a socket (&quot;total_len&quot;) is used in a loop condition" ln="38" locFile="/BugDetective/integerOverflow.c" ruleSAFMsg="Tainted data use in a loop condition" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="24" rule="BD-SECURITY-TDLOOP" FirstElSrcRngStartPos="0" lnHash="-1145053432" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/BugDetective/integerOverflow.c" rule.header="Validate potentially tainted data before it is used in the controlling expression of a loop" FirstElSrcRngStartln="23" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2054941873" lang="cpp" violId="d8335baa-61aa-3dd7-945e-d8a2643856c6" locEndPos="0" urgent="true" locEndLn="39" goals="1," locStartln="38" sev="1" locRef="6" tool="c++test" lineHash="-1145053432" unbViolId="5fa39c5f-76b2-3424-b72a-5abbe0e572df" locType="sr" hash="-1197576192" causeLocRef="6">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-728176747" ln="18" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="18" srcRngEndLn="19" srcRngFile="/BugDetective/integerOverflow.c" desc="int i, header_len;" ElType="." rngLn="18" />
        <ElDesc lineHash="1710618239" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/BugDetective/integerOverflow.c" desc="long msg_len;" ElType="." rngLn="19" />
        <ElDesc lineHash="184186530" ln="20" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="20" srcRngEndLn="21" srcRngFile="/BugDetective/integerOverflow.c" desc="size_t total_len;" ElType="." rngLn="20" />
        <ElDesc lineHash="339000195" ln="21" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="21" srcRngEndLn="22" srcRngFile="/BugDetective/integerOverflow.c" desc="char *msg;" ElType="." rngLn="21" />
        <ElDesc lineHash="762177369" ln="23" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="23" srcRngEndLn="24" srcRngFile="/BugDetective/integerOverflow.c" desc="recv(socket, buffer, BUFFER_SIZE, MSG_NOSIGNAL);" ElType=".C" rngLn="23">
          <Props>
            <Prop key="Tracked variables" val="buffer[]" />
          </Props>
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
            <Ann msg="Tainted data: buffer[]" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="63245237" ln="24" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="24" srcRngEndLn="25" srcRngFile="/BugDetective/integerOverflow.c" desc="msg_len = atol(buffer);" ElType="." rngLn="24" />
        <ElDesc lineHash="1998902284" ln="25" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="25" srcRngEndLn="26" srcRngFile="/BugDetective/integerOverflow.c" desc="header_len = strlen(header);" ElType="." rngLn="25" />
        <ElDesc lineHash="-295809370" ln="26" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="26" srcRngEndLn="27" srcRngFile="/BugDetective/integerOverflow.c" desc="total_len = header_len;" ElType="." rngLn="26" />
        <ElDesc lineHash="-1332386784" ln="27" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="27" srcRngEndLn="28" srcRngFile="/BugDetective/integerOverflow.c" desc="total_len += msg_len; /* POSSIBLE INTEGER OVERFLOW HERE */" ElType="." rngLn="27" />
        <ElDesc lineHash="-711727233" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/BugDetective/integerOverflow.c" desc="msg = (char*)malloc(total_len); /* VIOLATION, USAGE OF OVERFLOWED VALUE */" ElType="." rngLn="29" />
        <ElDesc lineHash="37614934" ln="30" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="30" srcRngEndLn="31" srcRngFile="/BugDetective/integerOverflow.c" desc="if (!msg) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="Condition evaluation: !msg (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="191649072" ln="34" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="34" srcRngEndLn="35" srcRngFile="/BugDetective/integerOverflow.c" desc="strcpy(msg, header);" ElType="." rngLn="34" />
        <ElDesc lineHash="1570251949" ln="36" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="36" srcRngEndLn="37" srcRngFile="/BugDetective/integerOverflow.c" desc="recv(socket, msg + msg_len, msg_len, MSG_NOSIGNAL);" ElType="." rngLn="36" />
        <ElDesc lineHash="-1145053432" ln="38" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="-1197576192" srcRngStartln="38" srcRngEndLn="39" srcRngFile="/BugDetective/integerOverflow.c" desc="for (i = header_len; i &lt; total_len; i++) { /* VIOLATION, USAGE OF OVERFLOWED VALUE */" ElType=".P" rngLn="38">
          <Props>
            <Prop key="Tracked variables" val="buffer[]" />
          </Props>
          <Anns>
            <Ann msg="Tainted data: buffer[]" kind="var" />
            <Ann msg="Tainted data use in a loop condition" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: p" ln="26" locFile="/BugDetective/memoryLeaks.c" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="19" rule="BD-RES-LEAKS" FirstElSrcRngStartPos="0" lnHash="2099466359" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/BugDetective/memoryLeaks.c" rule.header="Ensure resources are freed" FirstElSrcRngStartln="18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="585789567" lang="cpp" violId="7593c3bf-f5ab-32f4-a363-96427eae3188" locEndPos="0" urgent="true" locEndLn="27" goals="1," locStartln="26" sev="1" locRef="7" tool="c++test" lineHash="2099466359" unbViolId="c36e4f15-cd11-3493-84d7-4456285ed844" locType="sr" hash="1502549011" causeLocRef="7">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-100714984" ln="12" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="12" srcRngEndLn="13" srcRngFile="/BugDetective/memoryLeaks.c" desc="char *c;" ElType="." rngLn="12" />
        <ElDesc lineHash="39827869" ln="13" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="13" srcRngEndLn="14" srcRngFile="/BugDetective/memoryLeaks.c" desc="char buf[100];" ElType="." rngLn="13" />
        <ElDesc lineHash="-785260158" ln="14" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="14" srcRngEndLn="15" srcRngFile="/BugDetective/memoryLeaks.c" desc="int id = 0;" ElType="." rngLn="14" />
        <ElDesc lineHash="66462730" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/BugDetective/memoryLeaks.c" desc="while(1) {" ElType="." rngLn="15">
          <Anns>
            <Ann msg="Loop condition evaluation: 1 (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-526658767" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/BugDetective/memoryLeaks.c" desc="c = fgets(buf, 100, file);" ElType="." rngLn="16" />
        <ElDesc lineHash="301978179" ln="17" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="17" srcRngEndLn="18" srcRngFile="/BugDetective/memoryLeaks.c" desc="if (c!=NULL) {" ElType="." rngLn="17">
          <Anns>
            <Ann msg="Condition evaluation: (c != 0) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1212191400" ln="18" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="18" srcRngEndLn="19" srcRngFile="/BugDetective/memoryLeaks.c" desc="malloc(...)" ElType=".C" rngLn="18">
          <Props>
            <Prop key="Tracked variables" val="malloc(...)" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: malloc(...)" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1212191400" ln="18" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="18" srcRngEndLn="19" srcRngFile="/BugDetective/memoryLeaks.c" desc="Person* p = malloc(sizeof(Person));" ElType="!" rngLn="18" />
        <ElDesc lineHash="-812912267" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/BugDetective/memoryLeaks.c" desc="if (p == 0) exit(1);" ElType="." rngLn="19">
          <Props>
            <Prop key="Tracked variables" val="p" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: p" kind="var" />
            <Ann msg="Condition evaluation: (p == 0) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1899725753" ln="20" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="20" srcRngEndLn="21" srcRngFile="/BugDetective/memoryLeaks.c" desc="p->personalId = ++id;" ElType="." rngLn="20" />
        <ElDesc lineHash="-217028449" ln="21" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="21" srcRngEndLn="22" srcRngFile="/BugDetective/memoryLeaks.c" desc="p->name = buf;" ElType="." rngLn="21" />
        <ElDesc lineHash="-2076993264" ln="22" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="22" srcRngEndLn="23" srcRngFile="/BugDetective/memoryLeaks.c" desc="storePerson(p);" ElType="." rngLn="22" />
        <ElDesc lineHash="2099466359" ln="26" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="26" srcRngEndLn="27" srcRngFile="/BugDetective/memoryLeaks.c" desc="} else {" ElType=".P" rngLn="26">
          <Props>
            <Prop key="Tracked variables" val="p" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: p" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: pointer" ln="40" locFile="/BugDetective/memoryLeaks.c" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="41" rule="BD-RES-LEAKS" FirstElSrcRngStartPos="0" lnHash="-334359523" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/BugDetective/memoryLeaks.c" rule.header="Ensure resources are freed" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="525280961" lang="cpp" violId="afccb27b-22ff-399d-87ad-9d4af2f1801d" locEndPos="0" urgent="true" locEndLn="41" goals="1," locStartln="40" sev="1" locRef="7" tool="c++test" lineHash="-334359523" unbViolId="a3e759c8-e69c-3582-b3d0-96f3a1ceaa91" locType="sr" hash="1502549011" causeLocRef="7">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="221640208" ln="34" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="34" srcRngEndLn="35" srcRngFile="/BugDetective/memoryLeaks.c" desc="int count = 0;" ElType="." rngLn="34" />
        <ElDesc lineHash="1125267983" ln="35" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="35" srcRngEndLn="36" srcRngFile="/BugDetective/memoryLeaks.c" desc="int LOOPS = 100;" ElType="." rngLn="35" />
        <ElDesc lineHash="22113273" ln="36" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="36" srcRngEndLn="37" srcRngFile="/BugDetective/memoryLeaks.c" desc="int MAXSIZE = 100;" ElType="." rngLn="36" />
        <ElDesc lineHash="-1239722706" ln="37" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="37" srcRngEndLn="38" srcRngFile="/BugDetective/memoryLeaks.c" desc="char *pointer = NULL;" ElType="." rngLn="37" />
        <ElDesc lineHash="-1318212244" ln="39" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="39" srcRngEndLn="40" srcRngFile="/BugDetective/memoryLeaks.c" desc="for(count=0; count &lt; LOOPS; count++) {" ElType="." rngLn="39">
          <Anns>
            <Ann msg="Loop condition evaluation: (count &lt; LOOPS) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-334359523" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/BugDetective/memoryLeaks.c" desc="malloc(...)" ElType=".C" rngLn="40">
          <Props>
            <Prop key="Tracked variables" val="malloc(...)" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: malloc(...)" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-334359523" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/BugDetective/memoryLeaks.c" desc="pointer = (char *)malloc(sizeof(char) * MAXSIZE);" ElType="!" rngLn="40" />
        <ElDesc lineHash="-1318212244" ln="39" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="39" srcRngEndLn="40" srcRngFile="/BugDetective/memoryLeaks.c" desc="for(count=0; count &lt; LOOPS; count++) {" ElType="." rngLn="39">
          <Props>
            <Prop key="Tracked variables" val="pointer" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: pointer" kind="var" />
            <Ann msg="Loop condition evaluation: (count &lt; LOOPS) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-334359523" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/BugDetective/memoryLeaks.c" desc="pointer = (char *)malloc(sizeof(char) * MAXSIZE);" ElType=".P" rngLn="40">
          <Props>
            <Prop key="Tracked variables" val="pointer" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: pointer" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value returned from method &quot;malloc&quot; should be checked" ln="44" locFile="/BugDetective/memoryLeaks.c" ruleSAFMsg="Point by which returned value should be checked" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="41" rule="BD-PB-CHECKRETGEN" FirstElSrcRngStartPos="0" lnHash="-1712628621" ruleSCSCMsg="Method call" FirstElSrcRngFile="/BugDetective/memoryLeaks.c" rule.header="Always check the returned value of non-void function" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1381748893" lang="cpp" violId="49528161-1ce5-3969-8f5d-c3b25c69b58b" locEndPos="0" urgent="true" locEndLn="45" goals="1," locStartln="44" sev="2" locRef="7" tool="c++test" lineHash="-1712628621" unbViolId="36151b40-9b0a-34cf-9021-ba8d6c45b5c8" locType="sr" hash="1502549011" causeLocRef="7">
      <Props />
      <ElDescList>
        <ElDesc lineHash="221640208" ln="34" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="34" srcRngEndLn="35" srcRngFile="/BugDetective/memoryLeaks.c" desc="int count = 0;" ElType="." rngLn="34" />
        <ElDesc lineHash="1125267983" ln="35" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="35" srcRngEndLn="36" srcRngFile="/BugDetective/memoryLeaks.c" desc="int LOOPS = 100;" ElType="." rngLn="35" />
        <ElDesc lineHash="22113273" ln="36" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="36" srcRngEndLn="37" srcRngFile="/BugDetective/memoryLeaks.c" desc="int MAXSIZE = 100;" ElType="." rngLn="36" />
        <ElDesc lineHash="-1239722706" ln="37" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="37" srcRngEndLn="38" srcRngFile="/BugDetective/memoryLeaks.c" desc="char *pointer = NULL;" ElType="." rngLn="37" />
        <ElDesc lineHash="-1318212244" ln="39" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="39" srcRngEndLn="40" srcRngFile="/BugDetective/memoryLeaks.c" desc="for(count=0; count &lt; LOOPS; count++) {" ElType="." rngLn="39">
          <Anns>
            <Ann msg="Loop condition evaluation: (count &lt; LOOPS) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-334359523" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/BugDetective/memoryLeaks.c" desc="malloc(...)" ElType=".C" rngLn="40">
          <Anns>
            <Ann msg="Method call" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-334359523" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/BugDetective/memoryLeaks.c" desc="pointer = (char *)malloc(sizeof(char) * MAXSIZE);" ElType="." rngLn="40" />
        <ElDesc lineHash="-1318212244" ln="39" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="39" srcRngEndLn="40" srcRngFile="/BugDetective/memoryLeaks.c" desc="for(count=0; count &lt; LOOPS; count++) {" ElType="." rngLn="39">
          <Anns>
            <Ann msg="Loop condition evaluation: (count &lt; LOOPS) (assuming false)" kind="condEval" />
            <Ann msg="Not entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1712628621" ln="44" srcRngStartPos="0" srcRngEndPos="0" locRef="7" locType="sr" srcRnghash="1502549011" srcRngStartln="44" srcRngEndLn="45" srcRngFile="/BugDetective/memoryLeaks.c" desc="free(pointer);" ElType=".P" rngLn="44">
          <Anns>
            <Ann msg="Point by which returned value should be checked" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;person&quot; may possibly be null" ln="13" locFile="/BugDetective/nullPointerDeref.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="11" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="650531314" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/BugDetective/dbutil.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="10" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-289034743" lang="cpp" violId="2ac7f427-945a-3739-9078-1eaf24825575" locEndPos="0" urgent="true" locEndLn="14" goals="1," locStartln="13" sev="1" locRef="8" tool="c++test" lineHash="650531314" unbViolId="34f2a2ee-5f73-3f5f-be0a-02a85bbc9398" locType="sr" hash="522847191" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="1374140990" ln="22" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="22" srcRngEndLn="23" srcRngFile="/BugDetective/nullPointerDeref.c" desc="Person* p = retrievePersonFromDB(id);" ElType="!" rngLn="22">
          <ElDescList>
            <ElDesc lineHash="1041656438" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-892903586" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/BugDetective/dbutil.c" desc="Person* p;" ElType="." rngLn="7" />
            <ElDesc lineHash="932373780" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-892903586" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/BugDetective/dbutil.c" desc="int MIN_ID = 1;" ElType="." rngLn="8" />
            <ElDesc lineHash="1035623864" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-892903586" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/BugDetective/dbutil.c" desc="if (id &lt; MIN_ID) {" ElType="." rngLn="9">
              <Anns>
                <Ann msg="Condition evaluation: (id &lt; MIN_ID) (assuming true)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="-1561874268" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="-892903586" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/BugDetective/dbutil.c" desc="return NULL;" ElType=".C" rngLn="10">
              <Anns>
                <Ann msg="Source of null value" kind="cause" />
                <Ann msg="Null value carrier: &lt;returned value of retrievePersonFromDB()>" kind="comment" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="Null value carrier: &lt;returned value of retrievePersonFromDB()> -> p" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1906410249" ln="23" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="23" srcRngEndLn="24" srcRngFile="/BugDetective/nullPointerDeref.c" desc="storePersonToFile(p, file);" ElType="!" rngLn="23">
          <ElDescList>
            <ElDesc lineHash="801076108" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/BugDetective/nullPointerDeref.c" desc="void storePersonToFile(Person *person, FILE* file)" ElType="!" rngLn="10">
              <Anns>
                <Ann msg="Null value carrier: p -> person" kind="comment" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1027984352" ln="12" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="12" srcRngEndLn="13" srcRngFile="/BugDetective/nullPointerDeref.c" desc="if (file!=NULL) {" ElType="." rngLn="12">
              <Anns>
                <Ann msg="Condition evaluation: (file != 0) (assuming true)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="650531314" ln="13" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="13" srcRngEndLn="14" srcRngFile="/BugDetective/nullPointerDeref.c" desc="fprintf(file, &quot;Id: %d Name: %s References:%s\n&quot;," ElType=".P" rngLn="13">
              <Anns>
                <Ann msg="Null value carrier: person" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="Null value carrier: p" kind="comment" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;file&quot; may possibly be null" ln="17" locFile="/BugDetective/nullPointerDeref.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="13" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="191846468" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/BugDetective/nullPointerDeref.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="12" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1368694412" lang="cpp" violId="94880eea-2963-374e-9324-f4ad26c91a6b" locEndPos="0" urgent="true" locEndLn="18" goals="1," locStartln="17" sev="1" locRef="8" tool="c++test" lineHash="191846468" unbViolId="54acfdcb-3b98-32ed-9d7c-615fdf0d64a5" locType="sr" hash="522847191" causeLocRef="8">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="1027984352" ln="12" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="12" srcRngEndLn="13" srcRngFile="/BugDetective/nullPointerDeref.c" desc="if (file!=NULL) {" ElType=".C" rngLn="12">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: file" kind="comment" />
            <Ann msg="Condition evaluation: (file != 0) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="191846468" ln="17" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="17" srcRngEndLn="18" srcRngFile="/BugDetective/nullPointerDeref.c" desc="fclose(file);" ElType=".P" rngLn="17">
          <Anns>
            <Ann msg="Null value carrier: file" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;p&quot; may possibly be null" ln="30" locFile="/BugDetective/nullPointerDeref.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="30" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="1708187001" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/BugDetective/nullPointerDeref.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="29" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="541566912" lang="cpp" violId="ded24dcb-2ca4-3529-82ba-136ee6037b7f" locEndPos="0" urgent="true" locEndLn="31" goals="1," locStartln="30" sev="1" locRef="8" tool="c++test" lineHash="1708187001" unbViolId="d7725970-3a6b-34a1-b49a-f702c99115b8" locType="sr" hash="522847191" causeLocRef="8">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="457932120" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/BugDetective/nullPointerDeref.c" desc="Person* p = malloc(sizeof(Person));" ElType=".C" rngLn="29">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: malloc(...)" kind="comment" />
            <Ann msg="Null value carrier: malloc(...) -> p" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1708187001" ln="30" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="30" srcRngEndLn="31" srcRngFile="/BugDetective/nullPointerDeref.c" desc="p->name = name;" ElType=".P" rngLn="30">
          <Anns>
            <Ann msg="Null value carrier: p" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value of &quot;c&quot; is never used" ln="40" locFile="/BugDetective/nullPointerDeref.c" ruleSAFMsg="Point where value is declared" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="41" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="1175606183" ruleSCSCMsg="Point where value is declared" FirstElSrcRngFile="/BugDetective/nullPointerDeref.c" rule.header="Avoid unused values" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2055826223" lang="cpp" violId="9d4fa1e4-c988-3be4-a4e5-a12f8bdd2c15" locEndPos="0" urgent="true" locEndLn="41" goals="1," locStartln="40" sev="3" locRef="8" tool="c++test" lineHash="1175606183" unbViolId="00761533-5fc9-37bf-8781-463618689083" locType="sr" hash="522847191" causeLocRef="8">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1175606183" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/BugDetective/nullPointerDeref.c" desc="c = *p->reference;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="Point where value is declared" kind="cause" />
            <Ann msg="Point where value is declared" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;p->reference&quot; may possibly be null" ln="40" locFile="/BugDetective/nullPointerDeref.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="40" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="1175606183" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/BugDetective/nullPointerDeref.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="39" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1881455769" lang="cpp" violId="548394b6-f15d-3abd-a8e2-ea6b52e0011b" locEndPos="0" urgent="true" locEndLn="41" goals="1," locStartln="40" sev="1" locRef="8" tool="c++test" lineHash="1175606183" unbViolId="5dd60200-a276-3b8a-a3e3-6bb92867227d" locType="sr" hash="522847191" causeLocRef="8">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-695983806" ln="38" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="38" srcRngEndLn="39" srcRngFile="/BugDetective/nullPointerDeref.c" desc="char c;" ElType="." rngLn="38" />
        <ElDesc lineHash="961893567" ln="39" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="39" srcRngEndLn="40" srcRngFile="/BugDetective/nullPointerDeref.c" desc="Person* p = createPerson(7, &quot;Alice&quot;, NULL);" ElType=".C" rngLn="39">
          <ElDescList>
            <ElDesc lineHash="1311475257" ln="27" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="27" srcRngEndLn="28" srcRngFile="/BugDetective/nullPointerDeref.c" desc="Person* createPerson(int id, char* name, char* ref)" ElType="!" rngLn="27">
              <Anns>
                <Ann msg="Null value carrier: &lt;parameter #3 of createPerson()> -> ref" kind="comment" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="457932120" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/BugDetective/nullPointerDeref.c" desc="Person* p = malloc(sizeof(Person));" ElType="." rngLn="29" />
            <ElDesc lineHash="1708187001" ln="30" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="30" srcRngEndLn="31" srcRngFile="/BugDetective/nullPointerDeref.c" desc="p->name = name;" ElType="." rngLn="30" />
            <ElDesc lineHash="2093147993" ln="31" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="31" srcRngEndLn="32" srcRngFile="/BugDetective/nullPointerDeref.c" desc="p->personalId = id;" ElType="." rngLn="31" />
            <ElDesc lineHash="708220577" ln="32" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="32" srcRngEndLn="33" srcRngFile="/BugDetective/nullPointerDeref.c" desc="p->reference = ref;" ElType="!" rngLn="32">
              <Anns>
                <Ann msg="Null value carrier: ref -> p->reference" kind="comment" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="-1256394053" ln="33" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="33" srcRngEndLn="34" srcRngFile="/BugDetective/nullPointerDeref.c" desc="return p;" ElType="." rngLn="33">
              <Anns>
                <Ann msg="Null value carrier: &lt;returned value of createPerson()>->reference, p->reference" kind="comment" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: &lt;parameter #3 of createPerson()>" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1175606183" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="8" locType="sr" srcRnghash="522847191" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/BugDetective/nullPointerDeref.c" desc="c = *p->reference;" ElType=".P" rngLn="40">
          <Anns>
            <Ann msg="Null value carrier: p->reference" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;x&quot; may possibly be null" ln="9" locFile="/BugDetective/nullPointerDerefBenchmark.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="70" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="-293575299" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/BugDetective/nullPointerDerefBenchmark.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="69" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="203144837" lang="cpp" violId="180bc546-fb7f-3e38-b6bb-c4d5505f4514" locEndPos="0" urgent="true" locEndLn="10" goals="1," locStartln="9" sev="1" locRef="9" tool="c++test" lineHash="-293575299" unbViolId="b9b3cf28-9d96-3a04-a0c5-f40951ac35a7" locType="sr" hash="-1583021683" causeLocRef="9">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="2035137398" ln="69" srcRngStartPos="0" srcRngEndPos="0" locRef="9" locType="sr" srcRnghash="-1583021683" srcRngStartln="69" srcRngEndLn="70" srcRngFile="/BugDetective/nullPointerDerefBenchmark.c" desc="x = 0;" ElType=".C" rngLn="69">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: x" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1669491884" ln="70" srcRngStartPos="0" srcRngEndPos="0" locRef="9" locType="sr" srcRnghash="-1583021683" srcRngStartln="70" srcRngEndLn="71" srcRngFile="/BugDetective/nullPointerDerefBenchmark.c" desc="if (b)" ElType="." rngLn="70">
          <Anns>
            <Ann msg="Condition evaluation: (b != 0) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="963008959" ln="72" srcRngStartPos="0" srcRngEndPos="0" locRef="9" locType="sr" srcRnghash="-1583021683" srcRngStartln="72" srcRngEndLn="73" srcRngFile="/BugDetective/nullPointerDerefBenchmark.c" desc="helper1(...)" ElType="!" rngLn="72">
          <ElDescList>
            <ElDesc lineHash="1669491884" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="9" locType="sr" srcRnghash="-1583021683" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/BugDetective/nullPointerDerefBenchmark.c" desc="if (b)" ElType="." rngLn="7">
              <Anns>
                <Ann msg="Condition evaluation: (b != 0) (false)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="-293575299" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="9" locType="sr" srcRnghash="-1583021683" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/BugDetective/nullPointerDerefBenchmark.c" desc="return *x;" ElType=".P" rngLn="9">
              <Anns>
                <Ann msg="Null value carrier: x" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;x&quot; may possibly be null" ln="13" locFile="/BugDetective/nullPointerDerefBenchmark.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="77" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="-293575299" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/BugDetective/nullPointerDerefBenchmark.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="76" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-577794662" lang="cpp" violId="66c1e3a5-2ae0-3ca2-9785-fb244cb38287" locEndPos="0" urgent="true" locEndLn="14" goals="1," locStartln="13" sev="1" locRef="9" tool="c++test" lineHash="-293575299" unbViolId="c8c977a3-abf3-3350-9141-1a4481f68901" locType="sr" hash="-1583021683" causeLocRef="9">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="2035137398" ln="76" srcRngStartPos="0" srcRngEndPos="0" locRef="9" locType="sr" srcRnghash="-1583021683" srcRngStartln="76" srcRngEndLn="77" srcRngFile="/BugDetective/nullPointerDerefBenchmark.c" desc="x = 0;" ElType=".C" rngLn="76">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: x" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="862376838" ln="77" srcRngStartPos="0" srcRngEndPos="0" locRef="9" locType="sr" srcRnghash="-1583021683" srcRngStartln="77" srcRngEndLn="78" srcRngFile="/BugDetective/nullPointerDerefBenchmark.c" desc="helper2()" ElType="!" rngLn="77">
          <ElDescList>
            <ElDesc lineHash="-293575299" ln="13" srcRngStartPos="0" srcRngEndPos="0" locRef="9" locType="sr" srcRnghash="-1583021683" srcRngStartln="13" srcRngEndLn="14" srcRngFile="/BugDetective/nullPointerDerefBenchmark.c" desc="return *x;" ElType=".P" rngLn="13">
              <Anns>
                <Ann msg="Null value carrier: x" kind="comment" />
                <Ann msg="Null pointer dereferencing point" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;x&quot; may possibly be null" ln="51" locFile="/BugDetective/nullPointerDerefBenchmark.c" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="47" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="60910973" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/BugDetective/nullPointerDerefBenchmark.c" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1823566354" lang="cpp" violId="b5757be0-2ebe-39c4-b920-c0a8aa798159" locEndPos="0" urgent="true" locEndLn="52" goals="1," locStartln="51" sev="1" locRef="9" tool="c++test" lineHash="60910973" unbViolId="89c2ef3c-c71c-34d6-91a4-651d728c565f" locType="sr" hash="-1583021683" causeLocRef="9">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-299073094" ln="45" srcRngStartPos="0" srcRngEndPos="0" locRef="9" locType="sr" srcRnghash="-1583021683" srcRngStartln="45" srcRngEndLn="46" srcRngFile="/BugDetective/nullPointerDerefBenchmark.c" desc="int* y = 0;" ElType="." rngLn="45" />
        <ElDesc lineHash="1828542768" ln="46" srcRngStartPos="0" srcRngEndPos="0" locRef="9" locType="sr" srcRnghash="-1583021683" srcRngStartln="46" srcRngEndLn="47" srcRngFile="/BugDetective/nullPointerDerefBenchmark.c" desc="if (x != 0)" ElType=".C" rngLn="46">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: x" kind="comment" />
            <Ann msg="Condition evaluation: (x != 0) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1578920847" ln="48" srcRngStartPos="0" srcRngEndPos="0" locRef="9" locType="sr" srcRnghash="-1583021683" srcRngStartln="48" srcRngEndLn="49" srcRngFile="/BugDetective/nullPointerDerefBenchmark.c" desc="if (y != 0)" ElType="." rngLn="48">
          <Anns>
            <Ann msg="Condition evaluation: (y != 0) (false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="60910973" ln="51" srcRngStartPos="0" srcRngEndPos="0" locRef="9" locType="sr" srcRnghash="-1583021683" srcRngStartln="51" srcRngEndLn="52" srcRngFile="/BugDetective/nullPointerDerefBenchmark.c" desc="return *x;" ElType=".P" rngLn="51">
          <Anns>
            <Ann msg="Null value carrier: x" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value returned from method &quot;fread&quot; should be checked" ln="29" locFile="/BugDetective/sqlInjection.c" ruleSAFMsg="Point by which returned value should be checked" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="30" rule="BD-PB-CHECKRETGEN" FirstElSrcRngStartPos="0" lnHash="-511599591" ruleSCSCMsg="Method call" FirstElSrcRngFile="/BugDetective/sqlInjection.c" rule.header="Always check the returned value of non-void function" FirstElSrcRngStartln="29" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1426786920" lang="cpp" violId="5748d098-ec80-3403-8036-49b135817113" locEndPos="0" urgent="true" locEndLn="30" goals="1," locStartln="29" sev="2" locRef="11" tool="c++test" lineHash="-511599591" unbViolId="8989dc95-1c07-3d5f-8aa5-6f4fd4a16f30" locType="sr" hash="-1138451494" causeLocRef="11">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-905220607" ln="26" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="26" srcRngEndLn="27" srcRngFile="/BugDetective/sqlInjection.c" desc="char parametersString[BUF_SIZE];" ElType="." rngLn="26" />
        <ElDesc lineHash="-559634335" ln="27" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="27" srcRngEndLn="28" srcRngFile="/BugDetective/sqlInjection.c" desc="char request[BUF_SIZE];" ElType="." rngLn="27" />
        <ElDesc lineHash="-511599591" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/BugDetective/sqlInjection.c" desc="fread(parametersString, 1, BUF_SIZE, file);" ElType="CP" rngLn="29">
          <Anns>
            <Ann msg="Method call" kind="cause" />
            <Ann msg="Point by which returned value should be checked" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Data obtained from a file (&quot;request[]&quot;) is injected to an SQL query" ln="35" locFile="/BugDetective/sqlInjection.c" ruleSAFMsg="Call to a dangerous method" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="30" rule="BD-SECURITY-TDSQL" FirstElSrcRngStartPos="0" lnHash="2001837733" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/BugDetective/sqlInjection.c" rule.header="Protect against SQL injection" FirstElSrcRngStartln="29" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1873730567" lang="cpp" violId="596d69c8-625e-3ed3-8312-a0c3f795a1cb" locEndPos="0" urgent="true" locEndLn="36" goals="1," locStartln="35" sev="1" locRef="11" tool="c++test" lineHash="2001837733" unbViolId="eab3fa09-5a5c-3800-888a-0af6d8763246" locType="sr" hash="-1138451494" causeLocRef="11">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-905220607" ln="26" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="26" srcRngEndLn="27" srcRngFile="/BugDetective/sqlInjection.c" desc="char parametersString[BUF_SIZE];" ElType="." rngLn="26" />
        <ElDesc lineHash="-559634335" ln="27" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="27" srcRngEndLn="28" srcRngFile="/BugDetective/sqlInjection.c" desc="char request[BUF_SIZE];" ElType="." rngLn="27" />
        <ElDesc lineHash="-511599591" ln="29" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="29" srcRngEndLn="30" srcRngFile="/BugDetective/sqlInjection.c" desc="fread(parametersString, 1, BUF_SIZE, file);" ElType=".C" rngLn="29">
          <Props>
            <Prop key="Tracked variables" val="parametersString[]" />
          </Props>
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
            <Ann msg="Tainted data: parametersString[]" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1599126410" ln="30" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="30" srcRngEndLn="31" srcRngFile="/BugDetective/sqlInjection.c" desc="strcpy(request, requestBeginning);" ElType="." rngLn="30" />
        <ElDesc lineHash="-1251525233" ln="31" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="31" srcRngEndLn="32" srcRngFile="/BugDetective/sqlInjection.c" desc="extractUsername(...)" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="1599599919" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/BugDetective/sqlInjection.c" desc="return s;" ElType="!" rngLn="15">
              <Props>
                <Prop key="Tracked variables" val="s[]" />
              </Props>
              <Anns>
                <Ann msg="Tainted data: s[]" kind="var" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1251525233" ln="31" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="31" srcRngEndLn="32" srcRngFile="/BugDetective/sqlInjection.c" desc="strcat(request, extractUsername(parametersString));" ElType="." rngLn="31" />
        <ElDesc lineHash="1521663516" ln="32" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="32" srcRngEndLn="33" srcRngFile="/BugDetective/sqlInjection.c" desc="strcat(request, requestPassword);" ElType="." rngLn="32" />
        <ElDesc lineHash="377084628" ln="33" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="33" srcRngEndLn="34" srcRngFile="/BugDetective/sqlInjection.c" desc="extractPassword(...)" ElType="!" rngLn="33">
          <ElDescList>
            <ElDesc lineHash="1599599919" ln="21" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="21" srcRngEndLn="22" srcRngFile="/BugDetective/sqlInjection.c" desc="return s;" ElType="!" rngLn="21">
              <Props>
                <Prop key="Tracked variables" val="s[]" />
              </Props>
              <Anns>
                <Ann msg="Tainted data: s[]" kind="var" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="377084628" ln="33" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="33" srcRngEndLn="34" srcRngFile="/BugDetective/sqlInjection.c" desc="strcat(request, extractPassword(parametersString));" ElType="!" rngLn="33" />
        <ElDesc lineHash="970597736" ln="34" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="34" srcRngEndLn="35" srcRngFile="/BugDetective/sqlInjection.c" desc="strcat(request, requestEnding);" ElType="." rngLn="34">
          <Props>
            <Prop key="Tracked variables" val="request[]" />
          </Props>
          <Anns>
            <Ann msg="Tainted data: request[]" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2001837733" ln="35" srcRngStartPos="0" srcRngEndPos="0" locRef="11" locType="sr" srcRnghash="-1138451494" srcRngStartln="35" srcRngEndLn="36" srcRngFile="/BugDetective/sqlInjection.c" desc="SQLExecDirect(statementHandle, (SQLCHAR *)request, strlen(request));" ElType=".P" rngLn="35">
          <Props>
            <Prop key="Tracked variables" val="request[]" />
          </Props>
          <Anns>
            <Ann msg="Tainted data: request[]" kind="var" />
            <Ann msg="Call to a dangerous method" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Condition &quot;!volumetric&quot; always evaluates to true" ln="16" locFile="/BugDetective/unreachableCode.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="12" rule="BD-PB-CC" FirstElSrcRngStartPos="0" lnHash="-187791626" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/BugDetective/unreachableCode.c" rule.header="Avoid conditions that always evaluate to the same value" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-527458111" lang="cpp" violId="15c7796f-6dc2-3b11-a43e-b2b1829f9f21" locEndPos="0" urgent="true" locEndLn="17" goals="1," locStartln="16" sev="2" locRef="12" tool="c++test" lineHash="-187791626" unbViolId="3b0475e2-05b6-32b0-a26c-096dd50ba6d3" locType="sr" hash="1398926183" causeLocRef="12">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1480948708" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/BugDetective/unreachableCode.c" desc="static void guessFigure(int round, int volumetric)" ElType=".C" rngLn="11">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1057660582" ln="13" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="13" srcRngEndLn="14" srcRngFile="/BugDetective/unreachableCode.c" desc="int figure;" ElType="." rngLn="13" />
        <ElDesc lineHash="698448873" ln="14" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="14" srcRngEndLn="15" srcRngFile="/BugDetective/unreachableCode.c" desc="if (round &amp;&amp; volumetric) {" ElType="!" rngLn="14">
          <Anns>
            <Ann msg="Condition evaluation: (round != 0) (assuming true)" kind="condEval" />
            <Ann msg="Condition evaluation: (volumetric != 0) (assuming false)" kind="condEval" />
            <Ann msg="Condition evaluation: round &amp;&amp; volumetric (false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-187791626" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/BugDetective/unreachableCode.c" desc="} else if (round &amp;&amp; !volumetric) {" ElType=".P" rngLn="16">
          <Anns>
            <Ann msg="Condition evaluation: (round != 0) (true)" kind="condEval" />
            <Ann msg="Point where senseless condition is used" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Condition &quot;!round&quot; always evaluates to true" ln="18" locFile="/BugDetective/unreachableCode.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="12" rule="BD-PB-CC" FirstElSrcRngStartPos="0" lnHash="-1388792196" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/BugDetective/unreachableCode.c" rule.header="Avoid conditions that always evaluate to the same value" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1630626668" lang="cpp" violId="757575aa-7119-3d14-80b0-8379cee40635" locEndPos="0" urgent="true" locEndLn="19" goals="1," locStartln="18" sev="2" locRef="12" tool="c++test" lineHash="-1388792196" unbViolId="7fa7fd5b-f093-37e1-9044-b68e6c8908d7" locType="sr" hash="1398926183" causeLocRef="12">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1480948708" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/BugDetective/unreachableCode.c" desc="static void guessFigure(int round, int volumetric)" ElType=".C" rngLn="11">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1057660582" ln="13" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="13" srcRngEndLn="14" srcRngFile="/BugDetective/unreachableCode.c" desc="int figure;" ElType="." rngLn="13" />
        <ElDesc lineHash="698448873" ln="14" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="14" srcRngEndLn="15" srcRngFile="/BugDetective/unreachableCode.c" desc="if (round &amp;&amp; volumetric) {" ElType="!" rngLn="14">
          <Anns>
            <Ann msg="Condition evaluation: (round != 0) (assuming false)" kind="condEval" />
            <Ann msg="Condition evaluation: round &amp;&amp; volumetric (false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-187791626" ln="16" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="16" srcRngEndLn="17" srcRngFile="/BugDetective/unreachableCode.c" desc="} else if (round &amp;&amp; !volumetric) {" ElType="." rngLn="16">
          <Anns>
            <Ann msg="Condition evaluation: (round != 0) (false)" kind="condEval" />
            <Ann msg="Condition evaluation: round &amp;&amp; !volumetric (false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1388792196" ln="18" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="18" srcRngEndLn="19" srcRngFile="/BugDetective/unreachableCode.c" desc="} else if (!round &amp;&amp; volumetric) {" ElType=".P" rngLn="18">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Unreachable branch(es): &quot;case HEMISPHERE&quot;" ln="24" locFile="/BugDetective/unreachableCode.c" ruleSAFMsg="Point where switch with unreachable branch(es) is defined" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="12" rule="BD-PB-SWITCH" FirstElSrcRngStartPos="0" lnHash="62977572" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/BugDetective/unreachableCode.c" rule.header="Avoid switch with unreachable branches" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1540691550" lang="cpp" violId="f0b0ce66-26d5-39d6-9766-4309c91d4b92" locEndPos="0" urgent="true" locEndLn="25" goals="1," locStartln="24" sev="2" locRef="12" tool="c++test" lineHash="62977572" unbViolId="958edf83-1ef6-32b9-9373-2108470d046b" locType="sr" hash="1398926183" causeLocRef="12">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1480948708" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/BugDetective/unreachableCode.c" desc="static void guessFigure(int round, int volumetric)" ElType=".C" rngLn="11">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1057660582" ln="13" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="13" srcRngEndLn="14" srcRngFile="/BugDetective/unreachableCode.c" desc="int figure;" ElType="." rngLn="13" />
        <ElDesc lineHash="698448873" ln="14" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="14" srcRngEndLn="15" srcRngFile="/BugDetective/unreachableCode.c" desc="if (round &amp;&amp; volumetric) {" ElType="." rngLn="14">
          <Anns>
            <Ann msg="Condition evaluation: (round != 0) (assuming true)" kind="condEval" />
            <Ann msg="Condition evaluation: (volumetric != 0) (assuming true)" kind="condEval" />
            <Ann msg="Condition evaluation: round &amp;&amp; volumetric (true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-793927953" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/BugDetective/unreachableCode.c" desc="figure = SPHERE;" ElType="!" rngLn="15" />
        <ElDesc lineHash="62977572" ln="24" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="24" srcRngEndLn="25" srcRngFile="/BugDetective/unreachableCode.c" desc="switch (figure) {" ElType=".P" rngLn="24">
          <Anns>
            <Ann msg="Point where switch with unreachable branch(es) is defined" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Condition &quot;(*cur >= 'a') &amp;&amp; (*cur &lt;= 'f')&quot; always evaluates to false" ln="51" locFile="/BugDetective/unreachableCode.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="45" rule="BD-PB-CC" FirstElSrcRngStartPos="0" lnHash="1747727699" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/BugDetective/unreachableCode.c" rule.header="Avoid conditions that always evaluate to the same value" FirstElSrcRngStartln="44" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1451351576" lang="cpp" violId="0e86bb49-387a-3fe8-b3b6-eeb0e4df585c" locEndPos="0" urgent="true" locEndLn="52" goals="1," locStartln="51" sev="2" locRef="12" tool="c++test" lineHash="1747727699" unbViolId="cc8a4cb8-1731-3591-a618-a3db76114ae7" locType="sr" hash="1398926183" causeLocRef="12">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1739736142" ln="44" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="44" srcRngEndLn="45" srcRngFile="/BugDetective/unreachableCode.c" desc="static void checkRange(char* cur)" ElType=".C" rngLn="44">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="207315533" ln="46" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="46" srcRngEndLn="47" srcRngFile="/BugDetective/unreachableCode.c" desc="if ((*cur &lt; '0') || (*cur > '9')) {" ElType="." rngLn="46">
          <Anns>
            <Ann msg="Condition evaluation: (*cur &lt; 48) (assuming false)" kind="condEval" />
            <Ann msg="Condition evaluation: (*cur > 57) (assuming false)" kind="condEval" />
            <Ann msg="Condition evaluation: (*cur &lt; '0') || (*cur > '9') (false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1747727699" ln="51" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="51" srcRngEndLn="52" srcRngFile="/BugDetective/unreachableCode.c" desc="if ((*cur >= 'a') &amp;&amp; (*cur &lt;= 'f')) {" ElType=".P" rngLn="51">
          <Anns>
            <Ann msg="Condition evaluation: (*cur >= 97) (false)" kind="condEval" />
            <Ann msg="Point where senseless condition is used" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Condition &quot;(int)*cur >= 97&quot; always evaluates to false" ln="51" locFile="/BugDetective/unreachableCode.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="45" rule="BD-PB-CC" FirstElSrcRngStartPos="0" lnHash="1747727699" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/BugDetective/unreachableCode.c" rule.header="Avoid conditions that always evaluate to the same value" FirstElSrcRngStartln="44" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-589878461" lang="cpp" violId="36a0881b-26a9-3c4b-ab61-96479a126081" locEndPos="0" urgent="true" locEndLn="52" goals="1," locStartln="51" sev="2" locRef="12" tool="c++test" lineHash="1747727699" unbViolId="1f172927-3cc0-318b-abfd-2a693d6b57b1" locType="sr" hash="1398926183" causeLocRef="12">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1739736142" ln="44" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="44" srcRngEndLn="45" srcRngFile="/BugDetective/unreachableCode.c" desc="static void checkRange(char* cur)" ElType=".C" rngLn="44">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="207315533" ln="46" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="46" srcRngEndLn="47" srcRngFile="/BugDetective/unreachableCode.c" desc="if ((*cur &lt; '0') || (*cur > '9')) {" ElType="." rngLn="46">
          <Anns>
            <Ann msg="Condition evaluation: (*cur &lt; 48) (assuming false)" kind="condEval" />
            <Ann msg="Condition evaluation: (*cur > 57) (assuming false)" kind="condEval" />
            <Ann msg="Condition evaluation: (*cur &lt; '0') || (*cur > '9') (false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1747727699" ln="51" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="51" srcRngEndLn="52" srcRngFile="/BugDetective/unreachableCode.c" desc="if ((*cur >= 'a') &amp;&amp; (*cur &lt;= 'f')) {" ElType=".P" rngLn="51">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;cur&quot; is checked for null after being dereferenced" ln="63" locFile="/BugDetective/unreachableCode.c" ruleSAFMsg="Point of checking for nullity" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="59" rule="BD-PB-DEREF" FirstElSrcRngStartPos="0" lnHash="219043974" ruleSCSCMsg="Point of dereferencing" FirstElSrcRngFile="/BugDetective/unreachableCode.c" rule.header="Do not check for null after dereferencing" FirstElSrcRngStartln="58" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1480975621" lang="cpp" violId="1de2a481-061b-3864-b4b0-c3c631fc1358" locEndPos="0" urgent="true" locEndLn="64" goals="1," locStartln="63" sev="2" locRef="12" tool="c++test" lineHash="219043974" unbViolId="7ab441d3-3551-3aa7-99a7-9579d1a543a0" locType="sr" hash="1398926183" causeLocRef="12">
      <Props>
        <Prop key="Tracked variables" val="Important values" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="1138493433" ln="58" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="58" srcRngEndLn="59" srcRngFile="/BugDetective/unreachableCode.c" desc="if (cur[0] == '-') {" ElType=".C" rngLn="58">
          <Props>
            <Prop key="Tracked variables" val="cur != null" />
          </Props>
          <Anns>
            <Ann msg="Point of dereferencing" kind="cause" />
            <Ann msg="Important values: cur != null" kind="var" />
            <Ann msg="Condition evaluation: (cur[0] == 45) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="219043974" ln="63" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="63" srcRngEndLn="64" srcRngFile="/BugDetective/unreachableCode.c" desc="if (cur == 0) {" ElType=".P" rngLn="63">
          <Props>
            <Prop key="Tracked variables" val="cur != null" />
          </Props>
          <Anns>
            <Ann msg="Important values: cur != null" kind="var" />
            <Ann msg="Point of checking for nullity" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Condition &quot;cur == 0&quot; always evaluates to false" ln="63" locFile="/BugDetective/unreachableCode.c" ruleSAFMsg="Point where senseless condition is used" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="57" rule="BD-PB-CC" FirstElSrcRngStartPos="0" lnHash="219043974" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/BugDetective/unreachableCode.c" rule.header="Avoid conditions that always evaluate to the same value" FirstElSrcRngStartln="56" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1056502269" lang="cpp" violId="d05a348c-330a-31b1-9df8-de1e5bbb4bac" locEndPos="0" urgent="true" locEndLn="64" goals="1," locStartln="63" sev="2" locRef="12" tool="c++test" lineHash="219043974" unbViolId="ac2f6dee-d710-3109-a545-99c8fdf003af" locType="sr" hash="1398926183" causeLocRef="12">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1824344440" ln="56" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="56" srcRngEndLn="57" srcRngFile="/BugDetective/unreachableCode.c" desc="static void checkSequence(char cur[])" ElType=".C" rngLn="56">
          <Anns>
            <Ann msg="Start of the path" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1138493433" ln="58" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="58" srcRngEndLn="59" srcRngFile="/BugDetective/unreachableCode.c" desc="if (cur[0] == '-') {" ElType="." rngLn="58">
          <Anns>
            <Ann msg="Condition evaluation: (cur[0] == 45) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="219043974" ln="63" srcRngStartPos="0" srcRngEndPos="0" locRef="12" locType="sr" srcRnghash="1398926183" srcRngStartln="63" srcRngEndLn="64" srcRngFile="/BugDetective/unreachableCode.c" desc="if (cur == 0) {" ElType=".P" rngLn="63">
          <Anns>
            <Ann msg="Point where senseless condition is used" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;numberOfCharactersPrinted&quot; is used prior to initialization" ln="27" locFile="/BugDetective/useBeforeInit.c" ruleSAFMsg="Usage point" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="19" rule="BD-PB-NOTINIT" FirstElSrcRngStartPos="0" lnHash="-1547729396" ruleSCSCMsg="Source of not initialized value" FirstElSrcRngFile="/BugDetective/useBeforeInit.c" rule.header="Avoid use before initialization" FirstElSrcRngStartln="18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2060208960" lang="cpp" violId="b111b245-5c8a-310e-aaa2-80cdac1bb511" locEndPos="0" urgent="true" locEndLn="28" goals="1," locStartln="27" sev="1" locRef="13" tool="c++test" lineHash="-1547729396" unbViolId="7141d394-dba2-3347-8ee4-9bd1dab75337" locType="sr" hash="-54878936" causeLocRef="13">
      <Props>
        <Prop key="Tracked variables" val="Not initialized value" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1954950279" ln="17" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="17" srcRngEndLn="18" srcRngFile="/BugDetective/useBeforeInit.c" desc="FILE *file;" ElType="." rngLn="17" />
        <ElDesc lineHash="943815722" ln="18" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="18" srcRngEndLn="19" srcRngFile="/BugDetective/useBeforeInit.c" desc="int numberOfCharactersPrinted;" ElType=".C" rngLn="18">
          <Props>
            <Prop key="Tracked variables" val="numberOfCharactersPrinted" />
          </Props>
          <Anns>
            <Ann msg="Source of not initialized value" kind="cause" />
            <Ann msg="Not initialized value: numberOfCharactersPrinted" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="986280837" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/BugDetective/useBeforeInit.c" desc="file = fopen(filename, &quot;w&quot;);" ElType="." rngLn="19" />
        <ElDesc lineHash="1027984352" ln="21" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="21" srcRngEndLn="22" srcRngFile="/BugDetective/useBeforeInit.c" desc="if (file!=NULL) {" ElType="." rngLn="21">
          <Anns>
            <Ann msg="Condition evaluation: (file != 0) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1547729396" ln="27" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="27" srcRngEndLn="28" srcRngFile="/BugDetective/useBeforeInit.c" desc="printf(&quot;File length: %d\n&quot;, numberOfCharactersPrinted);" ElType=".P" rngLn="27">
          <Props>
            <Prop key="Tracked variables" val="numberOfCharactersPrinted" />
          </Props>
          <Anns>
            <Ann msg="Not initialized value: numberOfCharactersPrinted" kind="var" />
            <Ann msg="Usage point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="File not closed: file" ln="40" locFile="/BugDetective/useBeforeInit.c" ruleSAFMsg="Point where opened file is lost" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="35" rule="BD-RES-LEAKS" FirstElSrcRngStartPos="0" lnHash="-321328779" ruleSCSCMsg="Point where file is opened" FirstElSrcRngFile="/BugDetective/useBeforeInit.c" rule.header="Ensure resources are freed" FirstElSrcRngStartln="34" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1991957079" lang="cpp" violId="4b793dc0-8a6b-3c03-b08d-c64be726ac08" locEndPos="0" urgent="true" locEndLn="41" goals="1," locStartln="40" sev="1" locRef="13" tool="c++test" lineHash="-321328779" unbViolId="9b3ce894-575c-39b3-9473-2019a5fc7b88" locType="sr" hash="-54878936" causeLocRef="13">
      <Props>
        <Prop key="Tracked variables" val="Opened file" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="1041656438" ln="32" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="32" srcRngEndLn="33" srcRngFile="/BugDetective/useBeforeInit.c" desc="Person* p;" ElType="." rngLn="32" />
        <ElDesc lineHash="-1954950279" ln="33" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="33" srcRngEndLn="34" srcRngFile="/BugDetective/useBeforeInit.c" desc="FILE *file;" ElType="." rngLn="33" />
        <ElDesc lineHash="986131882" ln="34" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="34" srcRngEndLn="35" srcRngFile="/BugDetective/useBeforeInit.c" desc="file = fopen(filename, &quot;r&quot;);" ElType=".C" rngLn="34">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
          <Anns>
            <Ann msg="Point where file is opened" kind="cause" />
            <Ann msg="Opened file: file" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1027984352" ln="35" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="35" srcRngEndLn="36" srcRngFile="/BugDetective/useBeforeInit.c" desc="if (file!=NULL) {" ElType="." rngLn="35">
          <Anns>
            <Ann msg="Condition evaluation: (file != 0) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="905762227" ln="36" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="36" srcRngEndLn="37" srcRngFile="/BugDetective/useBeforeInit.c" desc="char id[10];" ElType="." rngLn="36" />
        <ElDesc lineHash="-170681591" ln="37" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="37" srcRngEndLn="38" srcRngFile="/BugDetective/useBeforeInit.c" desc="char name[100];" ElType="." rngLn="37" />
        <ElDesc lineHash="-483460585" ln="38" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="38" srcRngEndLn="39" srcRngFile="/BugDetective/useBeforeInit.c" desc="char reference[1000];" ElType="." rngLn="38" />
        <ElDesc lineHash="1433650083" ln="39" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="39" srcRngEndLn="40" srcRngFile="/BugDetective/useBeforeInit.c" desc="p = malloc(sizeof(Person));" ElType="." rngLn="39" />
        <ElDesc lineHash="-321328779" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/BugDetective/useBeforeInit.c" desc="exit(...)" ElType=".P" rngLn="40">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
          <Anns>
            <Ann msg="Opened file: file" kind="var" />
            <Ann msg="Point where opened file is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value returned from method &quot;fgets&quot; should be checked" ln="41" locFile="/BugDetective/useBeforeInit.c" ruleSAFMsg="Point by which returned value should be checked" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="42" rule="BD-PB-CHECKRETGEN" FirstElSrcRngStartPos="0" lnHash="733807829" ruleSCSCMsg="Method call" FirstElSrcRngFile="/BugDetective/useBeforeInit.c" rule.header="Always check the returned value of non-void function" FirstElSrcRngStartln="41" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1482391288" lang="cpp" violId="039a39e9-805b-33f3-b9b6-1361602ee177" locEndPos="0" urgent="true" locEndLn="42" goals="1," locStartln="41" sev="2" locRef="13" tool="c++test" lineHash="733807829" unbViolId="08dbc3e7-1ae6-3706-b4d6-7179a3274f7e" locType="sr" hash="-54878936" causeLocRef="13">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1041656438" ln="32" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="32" srcRngEndLn="33" srcRngFile="/BugDetective/useBeforeInit.c" desc="Person* p;" ElType="." rngLn="32" />
        <ElDesc lineHash="-1954950279" ln="33" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="33" srcRngEndLn="34" srcRngFile="/BugDetective/useBeforeInit.c" desc="FILE *file;" ElType="." rngLn="33" />
        <ElDesc lineHash="986131882" ln="34" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="34" srcRngEndLn="35" srcRngFile="/BugDetective/useBeforeInit.c" desc="file = fopen(filename, &quot;r&quot;);" ElType="." rngLn="34" />
        <ElDesc lineHash="1027984352" ln="35" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="35" srcRngEndLn="36" srcRngFile="/BugDetective/useBeforeInit.c" desc="if (file!=NULL) {" ElType="." rngLn="35">
          <Anns>
            <Ann msg="Condition evaluation: (file != 0) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="905762227" ln="36" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="36" srcRngEndLn="37" srcRngFile="/BugDetective/useBeforeInit.c" desc="char id[10];" ElType="." rngLn="36" />
        <ElDesc lineHash="-170681591" ln="37" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="37" srcRngEndLn="38" srcRngFile="/BugDetective/useBeforeInit.c" desc="char name[100];" ElType="." rngLn="37" />
        <ElDesc lineHash="-483460585" ln="38" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="38" srcRngEndLn="39" srcRngFile="/BugDetective/useBeforeInit.c" desc="char reference[1000];" ElType="." rngLn="38" />
        <ElDesc lineHash="1433650083" ln="39" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="39" srcRngEndLn="40" srcRngFile="/BugDetective/useBeforeInit.c" desc="p = malloc(sizeof(Person));" ElType="." rngLn="39" />
        <ElDesc lineHash="-321328779" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/BugDetective/useBeforeInit.c" desc="if (p == 0) exit(1);" ElType="." rngLn="40">
          <Anns>
            <Ann msg="Condition evaluation: (p == 0) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="733807829" ln="41" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="41" srcRngEndLn="42" srcRngFile="/BugDetective/useBeforeInit.c" desc="fgets(id, 10, file);" ElType="CP" rngLn="41">
          <Anns>
            <Ann msg="Method call" kind="cause" />
            <Ann msg="Point by which returned value should be checked" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;id&quot; string from the &quot;fgets&quot; method is used but was not reset" ln="42" locFile="/BugDetective/useBeforeInit.c" ruleSAFMsg="Place where the string is used" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="42" rule="BD-PB-FGETS" FirstElSrcRngStartPos="0" lnHash="1253528737" ruleSCSCMsg="Place where the string is obtained" FirstElSrcRngFile="/BugDetective/useBeforeInit.c" rule.header="Reset strings on fgets() or fgetws() failure" FirstElSrcRngStartln="41" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1805367807" lang="cpp" violId="73439b14-b0d4-3d25-8f0d-4878c8846818" locEndPos="0" urgent="true" locEndLn="43" goals="1," locStartln="42" sev="2" locRef="13" tool="c++test" lineHash="1253528737" unbViolId="8a078943-e405-3c86-89b0-770f907db378" locType="sr" hash="-54878936" causeLocRef="13">
      <Props />
      <ElDescList>
        <ElDesc lineHash="733807829" ln="41" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="41" srcRngEndLn="42" srcRngFile="/BugDetective/useBeforeInit.c" desc="fgets(id, 10, file);" ElType=".C" rngLn="41">
          <Anns>
            <Ann msg="Place where the string is obtained" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1253528737" ln="42" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="42" srcRngEndLn="43" srcRngFile="/BugDetective/useBeforeInit.c" desc="p->personalId = atoi(id);" ElType=".P" rngLn="42">
          <Anns>
            <Ann msg="Place where the string is used" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value returned from method &quot;fgets&quot; should be checked" ln="43" locFile="/BugDetective/useBeforeInit.c" ruleSAFMsg="Point by which returned value should be checked" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="44" rule="BD-PB-CHECKRETGEN" FirstElSrcRngStartPos="0" lnHash="-726318129" ruleSCSCMsg="Method call" FirstElSrcRngFile="/BugDetective/useBeforeInit.c" rule.header="Always check the returned value of non-void function" FirstElSrcRngStartln="43" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1678578016" lang="cpp" violId="65f4da63-7d18-37d8-9e9b-5f3b016f1728" locEndPos="0" urgent="true" locEndLn="44" goals="1," locStartln="43" sev="2" locRef="13" tool="c++test" lineHash="-726318129" unbViolId="c0f31491-bbec-3fb8-841d-e3eb0b3aa3bb" locType="sr" hash="-54878936" causeLocRef="13">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1041656438" ln="32" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="32" srcRngEndLn="33" srcRngFile="/BugDetective/useBeforeInit.c" desc="Person* p;" ElType="." rngLn="32" />
        <ElDesc lineHash="-1954950279" ln="33" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="33" srcRngEndLn="34" srcRngFile="/BugDetective/useBeforeInit.c" desc="FILE *file;" ElType="." rngLn="33" />
        <ElDesc lineHash="986131882" ln="34" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="34" srcRngEndLn="35" srcRngFile="/BugDetective/useBeforeInit.c" desc="file = fopen(filename, &quot;r&quot;);" ElType="." rngLn="34" />
        <ElDesc lineHash="1027984352" ln="35" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="35" srcRngEndLn="36" srcRngFile="/BugDetective/useBeforeInit.c" desc="if (file!=NULL) {" ElType="." rngLn="35">
          <Anns>
            <Ann msg="Condition evaluation: (file != 0) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="905762227" ln="36" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="36" srcRngEndLn="37" srcRngFile="/BugDetective/useBeforeInit.c" desc="char id[10];" ElType="." rngLn="36" />
        <ElDesc lineHash="-170681591" ln="37" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="37" srcRngEndLn="38" srcRngFile="/BugDetective/useBeforeInit.c" desc="char name[100];" ElType="." rngLn="37" />
        <ElDesc lineHash="-483460585" ln="38" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="38" srcRngEndLn="39" srcRngFile="/BugDetective/useBeforeInit.c" desc="char reference[1000];" ElType="." rngLn="38" />
        <ElDesc lineHash="1433650083" ln="39" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="39" srcRngEndLn="40" srcRngFile="/BugDetective/useBeforeInit.c" desc="p = malloc(sizeof(Person));" ElType="." rngLn="39" />
        <ElDesc lineHash="-321328779" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/BugDetective/useBeforeInit.c" desc="if (p == 0) exit(1);" ElType="." rngLn="40">
          <Anns>
            <Ann msg="Condition evaluation: (p == 0) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="733807829" ln="41" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="41" srcRngEndLn="42" srcRngFile="/BugDetective/useBeforeInit.c" desc="fgets(id, 10, file);" ElType="." rngLn="41" />
        <ElDesc lineHash="1253528737" ln="42" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="42" srcRngEndLn="43" srcRngFile="/BugDetective/useBeforeInit.c" desc="p->personalId = atoi(id);" ElType="." rngLn="42" />
        <ElDesc lineHash="-726318129" ln="43" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="43" srcRngEndLn="44" srcRngFile="/BugDetective/useBeforeInit.c" desc="fgets(name, 100, file);" ElType="CP" rngLn="43">
          <Anns>
            <Ann msg="Method call" kind="cause" />
            <Ann msg="Point by which returned value should be checked" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Value returned from method &quot;fgets&quot; should be checked" ln="45" locFile="/BugDetective/useBeforeInit.c" ruleSAFMsg="Point by which returned value should be checked" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="46" rule="BD-PB-CHECKRETGEN" FirstElSrcRngStartPos="0" lnHash="-1026068167" ruleSCSCMsg="Method call" FirstElSrcRngFile="/BugDetective/useBeforeInit.c" rule.header="Always check the returned value of non-void function" FirstElSrcRngStartln="45" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2100132604" lang="cpp" violId="7850137e-87e9-3232-bb06-8a70c42d7f38" locEndPos="0" urgent="true" locEndLn="46" goals="1," locStartln="45" sev="2" locRef="13" tool="c++test" lineHash="-1026068167" unbViolId="8b97c640-4715-38ac-88b5-b38fe3bafd5e" locType="sr" hash="-54878936" causeLocRef="13">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1041656438" ln="32" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="32" srcRngEndLn="33" srcRngFile="/BugDetective/useBeforeInit.c" desc="Person* p;" ElType="." rngLn="32" />
        <ElDesc lineHash="-1954950279" ln="33" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="33" srcRngEndLn="34" srcRngFile="/BugDetective/useBeforeInit.c" desc="FILE *file;" ElType="." rngLn="33" />
        <ElDesc lineHash="986131882" ln="34" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="34" srcRngEndLn="35" srcRngFile="/BugDetective/useBeforeInit.c" desc="file = fopen(filename, &quot;r&quot;);" ElType="." rngLn="34" />
        <ElDesc lineHash="1027984352" ln="35" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="35" srcRngEndLn="36" srcRngFile="/BugDetective/useBeforeInit.c" desc="if (file!=NULL) {" ElType="." rngLn="35">
          <Anns>
            <Ann msg="Condition evaluation: (file != 0) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="905762227" ln="36" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="36" srcRngEndLn="37" srcRngFile="/BugDetective/useBeforeInit.c" desc="char id[10];" ElType="." rngLn="36" />
        <ElDesc lineHash="-170681591" ln="37" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="37" srcRngEndLn="38" srcRngFile="/BugDetective/useBeforeInit.c" desc="char name[100];" ElType="." rngLn="37" />
        <ElDesc lineHash="-483460585" ln="38" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="38" srcRngEndLn="39" srcRngFile="/BugDetective/useBeforeInit.c" desc="char reference[1000];" ElType="." rngLn="38" />
        <ElDesc lineHash="1433650083" ln="39" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="39" srcRngEndLn="40" srcRngFile="/BugDetective/useBeforeInit.c" desc="p = malloc(sizeof(Person));" ElType="." rngLn="39" />
        <ElDesc lineHash="-321328779" ln="40" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="40" srcRngEndLn="41" srcRngFile="/BugDetective/useBeforeInit.c" desc="if (p == 0) exit(1);" ElType="." rngLn="40">
          <Anns>
            <Ann msg="Condition evaluation: (p == 0) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="733807829" ln="41" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="41" srcRngEndLn="42" srcRngFile="/BugDetective/useBeforeInit.c" desc="fgets(id, 10, file);" ElType="." rngLn="41" />
        <ElDesc lineHash="1253528737" ln="42" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="42" srcRngEndLn="43" srcRngFile="/BugDetective/useBeforeInit.c" desc="p->personalId = atoi(id);" ElType="." rngLn="42" />
        <ElDesc lineHash="-726318129" ln="43" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="43" srcRngEndLn="44" srcRngFile="/BugDetective/useBeforeInit.c" desc="fgets(name, 100, file);" ElType="." rngLn="43" />
        <ElDesc lineHash="68474233" ln="44" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="44" srcRngEndLn="45" srcRngFile="/BugDetective/useBeforeInit.c" desc="p->name = name;" ElType="." rngLn="44" />
        <ElDesc lineHash="-1026068167" ln="45" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="45" srcRngEndLn="46" srcRngFile="/BugDetective/useBeforeInit.c" desc="fgets(reference, 100, file);" ElType="CP" rngLn="45">
          <Anns>
            <Ann msg="Method call" kind="cause" />
            <Ann msg="Point by which returned value should be checked" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;p&quot; is used prior to initialization" ln="51" locFile="/BugDetective/useBeforeInit.c" ruleSAFMsg="Usage point" FirstElSrcRngEndPos="0" auth="root" FirstElSrcRngEndLn="33" rule="BD-PB-NOTINIT" FirstElSrcRngStartPos="0" lnHash="1220665574" ruleSCSCMsg="Source of not initialized value" FirstElSrcRngFile="/BugDetective/useBeforeInit.c" rule.header="Avoid use before initialization" FirstElSrcRngStartln="32" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1888625583" lang="cpp" violId="7c325b69-21b2-3c51-bfaa-6d0b6a861a07" locEndPos="0" urgent="true" locEndLn="52" goals="1," locStartln="51" sev="1" locRef="13" tool="c++test" lineHash="1220665574" unbViolId="d741f97a-0bc7-39d0-8b8a-938bc5abf4f4" locType="sr" hash="-54878936" causeLocRef="13">
      <Props>
        <Prop key="Tracked variables" val="Not initialized value" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="1041656438" ln="32" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="32" srcRngEndLn="33" srcRngFile="/BugDetective/useBeforeInit.c" desc="Person* p;" ElType=".C" rngLn="32">
          <Props>
            <Prop key="Tracked variables" val="p" />
          </Props>
          <Anns>
            <Ann msg="Source of not initialized value" kind="cause" />
            <Ann msg="Not initialized value: p" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1954950279" ln="33" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="33" srcRngEndLn="34" srcRngFile="/BugDetective/useBeforeInit.c" desc="FILE *file;" ElType="." rngLn="33" />
        <ElDesc lineHash="986131882" ln="34" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="34" srcRngEndLn="35" srcRngFile="/BugDetective/useBeforeInit.c" desc="file = fopen(filename, &quot;r&quot;);" ElType="." rngLn="34" />
        <ElDesc lineHash="1027984352" ln="35" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="35" srcRngEndLn="36" srcRngFile="/BugDetective/useBeforeInit.c" desc="if (file!=NULL) {" ElType="." rngLn="35">
          <Anns>
            <Ann msg="Condition evaluation: (file != 0) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="295924201" ln="50" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="50" srcRngEndLn="51" srcRngFile="/BugDetective/useBeforeInit.c" desc="storePersonToDB(p);" ElType="." rngLn="50" />
        <ElDesc lineHash="1220665574" ln="51" srcRngStartPos="0" srcRngEndPos="0" locRef="13" locType="sr" srcRnghash="-54878936" srcRngStartln="51" srcRngEndLn="52" srcRngFile="/BugDetective/useBeforeInit.c" desc="free(p);" ElType=".P" rngLn="51">
          <Props>
            <Prop key="Tracked variables" val="p" />
          </Props>
          <Anns>
            <Ann msg="Not initialized value: p" kind="var" />
            <Ann msg="Usage point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
  </StdViols>

      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="43">
            <Project id="BugDetective" name="BugDetective" supp="0" total="43">
               <Res loc="/BugDetective/arrayOutOfBounds.c" locRef="1" locType="sr" name="arrayOutOfBounds.c" supp="0" total="4" />
               <Res loc="/BugDetective/bufferOverflow.c" locRef="2" locType="sr" name="bufferOverflow.c" supp="0" total="3" />
               <Res loc="/BugDetective/dbutil.c" locRef="3" locType="sr" name="dbutil.c" supp="0" total="0" />
               <Res loc="/BugDetective/divisionByZero.c" locRef="4" locType="sr" name="divisionByZero.c" supp="0" total="2" />
               <Res loc="/BugDetective/fileLeaks.c" locRef="5" locType="sr" name="fileLeaks.c" supp="0" total="4" />
               <Res loc="/BugDetective/integerOverflow.c" locRef="6" locType="sr" name="integerOverflow.c" supp="0" total="3" />
               <Res loc="/BugDetective/memoryLeaks.c" locRef="7" locType="sr" name="memoryLeaks.c" supp="0" total="3" />
               <Res loc="/BugDetective/nullPointerDeref.c" locRef="8" locType="sr" name="nullPointerDeref.c" supp="0" total="5" />
               <Res loc="/BugDetective/nullPointerDerefBenchmark.c" locRef="9" locType="sr" name="nullPointerDerefBenchmark.c" supp="0" total="3" />
               <Res loc="/BugDetective/sql.c" locRef="10" locType="sr" name="sql.c" supp="0" total="0" />
               <Res loc="/BugDetective/sqlInjection.c" locRef="11" locType="sr" name="sqlInjection.c" supp="0" total="2" />
               <Res loc="/BugDetective/unreachableCode.c" locRef="12" locType="sr" name="unreachableCode.c" supp="0" total="7" />
               <Res loc="/BugDetective/useBeforeInit.c" locRef="13" locType="sr" name="useBeforeInit.c" supp="0" total="7" />
               <Res loc="/BugDetective/socket.h" locRef="14" locType="sr" name="socket.h" supp="0" total="0" />
               <Res loc="/BugDetective/dbutil.h" locRef="15" locType="sr" name="dbutil.h" supp="0" total="0" />
               <Res loc="/BugDetective/sql.h" locRef="16" locType="sr" name="sql.h" supp="0" total="0" />
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>
